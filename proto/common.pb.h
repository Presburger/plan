// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2eproto;
namespace milvus {
namespace proto {
namespace common {
class Address;
struct AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Blob;
struct BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class ClientInfo_ReservedEntry_DoNotUse;
struct ClientInfo_ReservedEntry_DoNotUseDefaultTypeInternal;
extern ClientInfo_ReservedEntry_DoNotUseDefaultTypeInternal _ClientInfo_ReservedEntry_DoNotUse_default_instance_;
class DMLMsgHeader;
struct DMLMsgHeaderDefaultTypeInternal;
extern DMLMsgHeaderDefaultTypeInternal _DMLMsgHeader_default_instance_;
class KeyDataPair;
struct KeyDataPairDefaultTypeInternal;
extern KeyDataPairDefaultTypeInternal _KeyDataPair_default_instance_;
class KeyValuePair;
struct KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MsgBase;
struct MsgBaseDefaultTypeInternal;
extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MsgBase_PropertiesEntry_DoNotUse;
struct MsgBase_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern MsgBase_PropertiesEntry_DoNotUseDefaultTypeInternal _MsgBase_PropertiesEntry_DoNotUse_default_instance_;
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class PlaceholderGroup;
struct PlaceholderGroupDefaultTypeInternal;
extern PlaceholderGroupDefaultTypeInternal _PlaceholderGroup_default_instance_;
class PlaceholderValue;
struct PlaceholderValueDefaultTypeInternal;
extern PlaceholderValueDefaultTypeInternal _PlaceholderValue_default_instance_;
class PrivilegeExt;
struct PrivilegeExtDefaultTypeInternal;
extern PrivilegeExtDefaultTypeInternal _PrivilegeExt_default_instance_;
class ReplicateInfo;
struct ReplicateInfoDefaultTypeInternal;
extern ReplicateInfoDefaultTypeInternal _ReplicateInfo_default_instance_;
class SegmentStats;
struct SegmentStatsDefaultTypeInternal;
extern SegmentStatsDefaultTypeInternal _SegmentStats_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfo_ReservedEntry_DoNotUse;
struct ServerInfo_ReservedEntry_DoNotUseDefaultTypeInternal;
extern ServerInfo_ReservedEntry_DoNotUseDefaultTypeInternal _ServerInfo_ReservedEntry_DoNotUse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace milvus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace milvus {
namespace proto {
namespace common {
enum ErrorCode : int {
  Success = 0,
  UnexpectedError = 1,
  ConnectFailed = 2,
  PermissionDenied = 3,
  CollectionNotExists = 4,
  IllegalArgument = 5,
  IllegalDimension = 7,
  IllegalIndexType = 8,
  IllegalCollectionName = 9,
  IllegalTOPK = 10,
  IllegalRowRecord = 11,
  IllegalVectorID = 12,
  IllegalSearchResult = 13,
  FileNotFound = 14,
  MetaFailed = 15,
  CacheFailed = 16,
  CannotCreateFolder = 17,
  CannotCreateFile = 18,
  CannotDeleteFolder = 19,
  CannotDeleteFile = 20,
  BuildIndexError = 21,
  IllegalNLIST = 22,
  IllegalMetricType = 23,
  OutOfMemory = 24,
  IndexNotExist = 25,
  EmptyCollection = 26,
  UpdateImportTaskFailure = 27,
  CollectionNameNotFound = 28,
  CreateCredentialFailure = 29,
  UpdateCredentialFailure = 30,
  DeleteCredentialFailure = 31,
  GetCredentialFailure = 32,
  ListCredUsersFailure = 33,
  GetUserFailure = 34,
  CreateRoleFailure = 35,
  DropRoleFailure = 36,
  OperateUserRoleFailure = 37,
  SelectRoleFailure = 38,
  SelectUserFailure = 39,
  SelectResourceFailure = 40,
  OperatePrivilegeFailure = 41,
  SelectGrantFailure = 42,
  RefreshPolicyInfoCacheFailure = 43,
  ListPolicyFailure = 44,
  NotShardLeader = 45,
  NoReplicaAvailable = 46,
  SegmentNotFound = 47,
  ForceDeny = 48,
  RateLimit = 49,
  NodeIDNotMatch = 50,
  UpsertAutoIDTrue = 51,
  InsufficientMemoryToLoad = 52,
  MemoryQuotaExhausted = 53,
  DiskQuotaExhausted = 54,
  TimeTickLongDelay = 55,
  NotReadyServe = 56,
  NotReadyCoordActivating = 57,
  DataCoordNA = 100,
  DDRequestRace = 1000,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorCode_IsValid(int value);
extern const uint32_t ErrorCode_internal_data_[];
constexpr ErrorCode ErrorCode_MIN = static_cast<ErrorCode>(0);
constexpr ErrorCode ErrorCode_MAX = static_cast<ErrorCode>(1000);
constexpr int ErrorCode_ARRAYSIZE = 1000 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorCode_descriptor();
template <typename T>
const std::string& ErrorCode_Name(T value) {
  static_assert(std::is_same<T, ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ::google::protobuf::internal::NameOfEnum(ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
      ErrorCode_descriptor(), name, value);
}
enum IndexState : int {
  IndexStateNone = 0,
  Unissued = 1,
  InProgress = 2,
  Finished = 3,
  Failed = 4,
  Retry = 5,
  IndexState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IndexState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IndexState_IsValid(int value);
extern const uint32_t IndexState_internal_data_[];
constexpr IndexState IndexState_MIN = static_cast<IndexState>(0);
constexpr IndexState IndexState_MAX = static_cast<IndexState>(5);
constexpr int IndexState_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
IndexState_descriptor();
template <typename T>
const std::string& IndexState_Name(T value) {
  static_assert(std::is_same<T, IndexState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IndexState_Name().");
  return IndexState_Name(static_cast<IndexState>(value));
}
template <>
inline const std::string& IndexState_Name(IndexState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IndexState_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool IndexState_Parse(absl::string_view name, IndexState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexState>(
      IndexState_descriptor(), name, value);
}
enum SegmentState : int {
  SegmentStateNone = 0,
  NotExist = 1,
  Growing = 2,
  Sealed = 3,
  Flushed = 4,
  Flushing = 5,
  Dropped = 6,
  Importing = 7,
  SegmentState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SegmentState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SegmentState_IsValid(int value);
extern const uint32_t SegmentState_internal_data_[];
constexpr SegmentState SegmentState_MIN = static_cast<SegmentState>(0);
constexpr SegmentState SegmentState_MAX = static_cast<SegmentState>(7);
constexpr int SegmentState_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
SegmentState_descriptor();
template <typename T>
const std::string& SegmentState_Name(T value) {
  static_assert(std::is_same<T, SegmentState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SegmentState_Name().");
  return SegmentState_Name(static_cast<SegmentState>(value));
}
template <>
inline const std::string& SegmentState_Name(SegmentState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SegmentState_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool SegmentState_Parse(absl::string_view name, SegmentState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SegmentState>(
      SegmentState_descriptor(), name, value);
}
enum PlaceholderType : int {
  None = 0,
  BinaryVector = 100,
  FloatVector = 101,
  Float16Vector = 102,
  BFloat16Vector = 103,
  Int64 = 5,
  VarChar = 21,
  PlaceholderType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlaceholderType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlaceholderType_IsValid(int value);
extern const uint32_t PlaceholderType_internal_data_[];
constexpr PlaceholderType PlaceholderType_MIN = static_cast<PlaceholderType>(0);
constexpr PlaceholderType PlaceholderType_MAX = static_cast<PlaceholderType>(103);
constexpr int PlaceholderType_ARRAYSIZE = 103 + 1;
const ::google::protobuf::EnumDescriptor*
PlaceholderType_descriptor();
template <typename T>
const std::string& PlaceholderType_Name(T value) {
  static_assert(std::is_same<T, PlaceholderType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlaceholderType_Name().");
  return ::google::protobuf::internal::NameOfEnum(PlaceholderType_descriptor(), value);
}
inline bool PlaceholderType_Parse(absl::string_view name, PlaceholderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlaceholderType>(
      PlaceholderType_descriptor(), name, value);
}
enum MsgType : int {
  Undefined = 0,
  CreateCollection = 100,
  DropCollection = 101,
  HasCollection = 102,
  DescribeCollection = 103,
  ShowCollections = 104,
  GetSystemConfigs = 105,
  LoadCollection = 106,
  ReleaseCollection = 107,
  CreateAlias = 108,
  DropAlias = 109,
  AlterAlias = 110,
  AlterCollection = 111,
  RenameCollection = 112,
  DescribeAlias = 113,
  ListAliases = 114,
  CreatePartition = 200,
  DropPartition = 201,
  HasPartition = 202,
  DescribePartition = 203,
  ShowPartitions = 204,
  LoadPartitions = 205,
  ReleasePartitions = 206,
  ShowSegments = 250,
  DescribeSegment = 251,
  LoadSegments = 252,
  ReleaseSegments = 253,
  HandoffSegments = 254,
  LoadBalanceSegments = 255,
  DescribeSegments = 256,
  FederListIndexedSegment = 257,
  FederDescribeSegmentIndexData = 258,
  CreateIndex = 300,
  DescribeIndex = 301,
  DropIndex = 302,
  GetIndexStatistics = 303,
  AlterIndex = 304,
  Insert = 400,
  Delete = 401,
  Flush = 402,
  ResendSegmentStats = 403,
  Upsert = 404,
  Search = 500,
  SearchResult = 501,
  GetIndexState = 502,
  GetIndexBuildProgress = 503,
  GetCollectionStatistics = 504,
  GetPartitionStatistics = 505,
  Retrieve = 506,
  RetrieveResult = 507,
  WatchDmChannels = 508,
  RemoveDmChannels = 509,
  WatchQueryChannels = 510,
  RemoveQueryChannels = 511,
  SealedSegmentsChangeInfo = 512,
  WatchDeltaChannels = 513,
  GetShardLeaders = 514,
  GetReplicas = 515,
  UnsubDmChannel = 516,
  GetDistribution = 517,
  SyncDistribution = 518,
  SegmentInfo = 600,
  SystemInfo = 601,
  GetRecoveryInfo = 602,
  GetSegmentState = 603,
  TimeTick = 1200,
  QueryNodeStats = 1201,
  LoadIndex = 1202,
  RequestID = 1203,
  RequestTSO = 1204,
  AllocateSegment = 1205,
  SegmentStatistics = 1206,
  SegmentFlushDone = 1207,
  DataNodeTt = 1208,
  Connect = 1209,
  ListClientInfos = 1210,
  AllocTimestamp = 1211,
  CreateCredential = 1500,
  GetCredential = 1501,
  DeleteCredential = 1502,
  UpdateCredential = 1503,
  ListCredUsernames = 1504,
  CreateRole = 1600,
  DropRole = 1601,
  OperateUserRole = 1602,
  SelectRole = 1603,
  SelectUser = 1604,
  SelectResource = 1605,
  OperatePrivilege = 1606,
  SelectGrant = 1607,
  RefreshPolicyInfoCache = 1608,
  ListPolicy = 1609,
  CreateResourceGroup = 1700,
  DropResourceGroup = 1701,
  ListResourceGroups = 1702,
  DescribeResourceGroup = 1703,
  TransferNode = 1704,
  TransferReplica = 1705,
  CreateDatabase = 1801,
  DropDatabase = 1802,
  ListDatabases = 1803,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(1803);
constexpr int MsgType_ARRAYSIZE = 1803 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return ::google::protobuf::internal::NameOfEnum(MsgType_descriptor(), value);
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}
enum DslType : int {
  Dsl = 0,
  BoolExprV1 = 1,
  DslType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DslType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DslType_IsValid(int value);
extern const uint32_t DslType_internal_data_[];
constexpr DslType DslType_MIN = static_cast<DslType>(0);
constexpr DslType DslType_MAX = static_cast<DslType>(1);
constexpr int DslType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
DslType_descriptor();
template <typename T>
const std::string& DslType_Name(T value) {
  static_assert(std::is_same<T, DslType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DslType_Name().");
  return DslType_Name(static_cast<DslType>(value));
}
template <>
inline const std::string& DslType_Name(DslType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DslType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool DslType_Parse(absl::string_view name, DslType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DslType>(
      DslType_descriptor(), name, value);
}
enum CompactionState : int {
  UndefiedState = 0,
  Executing = 1,
  Completed = 2,
  CompactionState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CompactionState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CompactionState_IsValid(int value);
extern const uint32_t CompactionState_internal_data_[];
constexpr CompactionState CompactionState_MIN = static_cast<CompactionState>(0);
constexpr CompactionState CompactionState_MAX = static_cast<CompactionState>(2);
constexpr int CompactionState_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CompactionState_descriptor();
template <typename T>
const std::string& CompactionState_Name(T value) {
  static_assert(std::is_same<T, CompactionState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CompactionState_Name().");
  return CompactionState_Name(static_cast<CompactionState>(value));
}
template <>
inline const std::string& CompactionState_Name(CompactionState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CompactionState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CompactionState_Parse(absl::string_view name, CompactionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompactionState>(
      CompactionState_descriptor(), name, value);
}
enum ConsistencyLevel : int {
  Strong = 0,
  Session = 1,
  Bounded = 2,
  Eventually = 3,
  Customized = 4,
  ConsistencyLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConsistencyLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConsistencyLevel_IsValid(int value);
extern const uint32_t ConsistencyLevel_internal_data_[];
constexpr ConsistencyLevel ConsistencyLevel_MIN = static_cast<ConsistencyLevel>(0);
constexpr ConsistencyLevel ConsistencyLevel_MAX = static_cast<ConsistencyLevel>(4);
constexpr int ConsistencyLevel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ConsistencyLevel_descriptor();
template <typename T>
const std::string& ConsistencyLevel_Name(T value) {
  static_assert(std::is_same<T, ConsistencyLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConsistencyLevel_Name().");
  return ConsistencyLevel_Name(static_cast<ConsistencyLevel>(value));
}
template <>
inline const std::string& ConsistencyLevel_Name(ConsistencyLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConsistencyLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ConsistencyLevel_Parse(absl::string_view name, ConsistencyLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsistencyLevel>(
      ConsistencyLevel_descriptor(), name, value);
}
enum ImportState : int {
  ImportPending = 0,
  ImportFailed = 1,
  ImportStarted = 2,
  ImportPersisted = 5,
  ImportFlushed = 8,
  ImportCompleted = 6,
  ImportFailedAndCleaned = 7,
  ImportState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ImportState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ImportState_IsValid(int value);
extern const uint32_t ImportState_internal_data_[];
constexpr ImportState ImportState_MIN = static_cast<ImportState>(0);
constexpr ImportState ImportState_MAX = static_cast<ImportState>(8);
constexpr int ImportState_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
ImportState_descriptor();
template <typename T>
const std::string& ImportState_Name(T value) {
  static_assert(std::is_same<T, ImportState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImportState_Name().");
  return ImportState_Name(static_cast<ImportState>(value));
}
template <>
inline const std::string& ImportState_Name(ImportState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImportState_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool ImportState_Parse(absl::string_view name, ImportState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImportState>(
      ImportState_descriptor(), name, value);
}
enum ObjectType : int {
  Collection = 0,
  Global = 1,
  User = 2,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ObjectType_IsValid(int value);
extern const uint32_t ObjectType_internal_data_[];
constexpr ObjectType ObjectType_MIN = static_cast<ObjectType>(0);
constexpr ObjectType ObjectType_MAX = static_cast<ObjectType>(2);
constexpr int ObjectType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ObjectType_descriptor();
template <typename T>
const std::string& ObjectType_Name(T value) {
  static_assert(std::is_same<T, ObjectType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ObjectType_Name().");
  return ObjectType_Name(static_cast<ObjectType>(value));
}
template <>
inline const std::string& ObjectType_Name(ObjectType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ObjectType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ObjectType_Parse(absl::string_view name, ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectType>(
      ObjectType_descriptor(), name, value);
}
enum ObjectPrivilege : int {
  PrivilegeAll = 0,
  PrivilegeCreateCollection = 1,
  PrivilegeDropCollection = 2,
  PrivilegeDescribeCollection = 3,
  PrivilegeShowCollections = 4,
  PrivilegeLoad = 5,
  PrivilegeRelease = 6,
  PrivilegeCompaction = 7,
  PrivilegeInsert = 8,
  PrivilegeDelete = 9,
  PrivilegeGetStatistics = 10,
  PrivilegeCreateIndex = 11,
  PrivilegeIndexDetail = 12,
  PrivilegeDropIndex = 13,
  PrivilegeSearch = 14,
  PrivilegeFlush = 15,
  PrivilegeQuery = 16,
  PrivilegeLoadBalance = 17,
  PrivilegeImport = 18,
  PrivilegeCreateOwnership = 19,
  PrivilegeUpdateUser = 20,
  PrivilegeDropOwnership = 21,
  PrivilegeSelectOwnership = 22,
  PrivilegeManageOwnership = 23,
  PrivilegeSelectUser = 24,
  PrivilegeUpsert = 25,
  PrivilegeCreateResourceGroup = 26,
  PrivilegeDropResourceGroup = 27,
  PrivilegeDescribeResourceGroup = 28,
  PrivilegeListResourceGroups = 29,
  PrivilegeTransferNode = 30,
  PrivilegeTransferReplica = 31,
  PrivilegeGetLoadingProgress = 32,
  PrivilegeGetLoadState = 33,
  PrivilegeRenameCollection = 34,
  PrivilegeCreateDatabase = 35,
  PrivilegeDropDatabase = 36,
  PrivilegeListDatabases = 37,
  PrivilegeFlushAll = 38,
  PrivilegeCreatePartition = 39,
  PrivilegeDropPartition = 40,
  PrivilegeShowPartitions = 41,
  PrivilegeHasPartition = 42,
  PrivilegeGetFlushState = 43,
  PrivilegeCreateAlias = 44,
  PrivilegeDropAlias = 45,
  PrivilegeDescribeAlias = 46,
  PrivilegeListAliases = 47,
  ObjectPrivilege_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ObjectPrivilege_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ObjectPrivilege_IsValid(int value);
extern const uint32_t ObjectPrivilege_internal_data_[];
constexpr ObjectPrivilege ObjectPrivilege_MIN = static_cast<ObjectPrivilege>(0);
constexpr ObjectPrivilege ObjectPrivilege_MAX = static_cast<ObjectPrivilege>(47);
constexpr int ObjectPrivilege_ARRAYSIZE = 47 + 1;
const ::google::protobuf::EnumDescriptor*
ObjectPrivilege_descriptor();
template <typename T>
const std::string& ObjectPrivilege_Name(T value) {
  static_assert(std::is_same<T, ObjectPrivilege>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ObjectPrivilege_Name().");
  return ObjectPrivilege_Name(static_cast<ObjectPrivilege>(value));
}
template <>
inline const std::string& ObjectPrivilege_Name(ObjectPrivilege value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ObjectPrivilege_descriptor,
                                                 0, 47>(
      static_cast<int>(value));
}
inline bool ObjectPrivilege_Parse(absl::string_view name, ObjectPrivilege* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectPrivilege>(
      ObjectPrivilege_descriptor(), name, value);
}
enum StateCode : int {
  Initializing = 0,
  Healthy = 1,
  Abnormal = 2,
  StandBy = 3,
  Stopping = 4,
  StateCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StateCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StateCode_IsValid(int value);
extern const uint32_t StateCode_internal_data_[];
constexpr StateCode StateCode_MIN = static_cast<StateCode>(0);
constexpr StateCode StateCode_MAX = static_cast<StateCode>(4);
constexpr int StateCode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StateCode_descriptor();
template <typename T>
const std::string& StateCode_Name(T value) {
  static_assert(std::is_same<T, StateCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StateCode_Name().");
  return StateCode_Name(static_cast<StateCode>(value));
}
template <>
inline const std::string& StateCode_Name(StateCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StateCode_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StateCode_Parse(absl::string_view name, StateCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateCode>(
      StateCode_descriptor(), name, value);
}
enum LoadState : int {
  LoadStateNotExist = 0,
  LoadStateNotLoad = 1,
  LoadStateLoading = 2,
  LoadStateLoaded = 3,
  LoadState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LoadState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LoadState_IsValid(int value);
extern const uint32_t LoadState_internal_data_[];
constexpr LoadState LoadState_MIN = static_cast<LoadState>(0);
constexpr LoadState LoadState_MAX = static_cast<LoadState>(3);
constexpr int LoadState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LoadState_descriptor();
template <typename T>
const std::string& LoadState_Name(T value) {
  static_assert(std::is_same<T, LoadState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LoadState_Name().");
  return LoadState_Name(static_cast<LoadState>(value));
}
template <>
inline const std::string& LoadState_Name(LoadState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LoadState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LoadState_Parse(absl::string_view name, LoadState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoadState>(
      LoadState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from)
      : Status(nullptr, from) {}
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Status* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.Status";
  }
  protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kDetailFieldNumber = 5,
    kErrorCodeFieldNumber = 1,
    kCodeFieldNumber = 3,
    kRetriableFieldNumber = 4,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string detail = 5;
  void clear_detail() ;
  const std::string& detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detail(Arg_&& arg, Args_... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* value);

  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(
      const std::string& value);
  std::string* _internal_mutable_detail();

  public:
  // .milvus.proto.common.ErrorCode error_code = 1 [deprecated = true];
  [[deprecated]]  void clear_error_code() ;
  [[deprecated]] ::milvus::proto::common::ErrorCode error_code() const;
  [[deprecated]] void set_error_code(::milvus::proto::common::ErrorCode value);

  private:
  ::milvus::proto::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::milvus::proto::common::ErrorCode value);

  public:
  // int32 code = 3;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // bool retriable = 4;
  void clear_retriable() ;
  bool retriable() const;
  void set_retriable(bool value);

  private:
  bool _internal_retriable() const;
  void _internal_set_retriable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.Status)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr detail_;
    int error_code_;
    ::int32_t code_;
    bool retriable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class ServerInfo_ReservedEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ServerInfo_ReservedEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ServerInfo_ReservedEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ServerInfo_ReservedEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo_ReservedEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ServerInfo_ReservedEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ServerInfo_ReservedEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ServerInfo_ReservedEntry_DoNotUse*>(
        &_ServerInfo_ReservedEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.ServerInfo.ReservedEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.ServerInfo.ReservedEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SegmentStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.SegmentStats) */ {
 public:
  inline SegmentStats() : SegmentStats(nullptr) {}
  ~SegmentStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SegmentStats(::google::protobuf::internal::ConstantInitialized);

  inline SegmentStats(const SegmentStats& from)
      : SegmentStats(nullptr, from) {}
  SegmentStats(SegmentStats&& from) noexcept
    : SegmentStats() {
    *this = ::std::move(from);
  }

  inline SegmentStats& operator=(const SegmentStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStats& operator=(SegmentStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentStats* internal_default_instance() {
    return reinterpret_cast<const SegmentStats*>(
               &_SegmentStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SegmentStats& a, SegmentStats& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SegmentStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SegmentStats& from) {
    SegmentStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SegmentStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.SegmentStats";
  }
  protected:
  explicit SegmentStats(::google::protobuf::Arena* arena);
  SegmentStats(::google::protobuf::Arena* arena, const SegmentStats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDFieldNumber = 1,
    kNumRowsFieldNumber = 2,
  };
  // int64 SegmentID = 1;
  void clear_segmentid() ;
  ::int64_t segmentid() const;
  void set_segmentid(::int64_t value);

  private:
  ::int64_t _internal_segmentid() const;
  void _internal_set_segmentid(::int64_t value);

  public:
  // int64 NumRows = 2;
  void clear_numrows() ;
  ::int64_t numrows() const;
  void set_numrows(::int64_t value);

  private:
  ::int64_t _internal_numrows() const;
  void _internal_set_numrows(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.SegmentStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t segmentid_;
    ::int64_t numrows_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class ReplicateInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.ReplicateInfo) */ {
 public:
  inline ReplicateInfo() : ReplicateInfo(nullptr) {}
  ~ReplicateInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateInfo(::google::protobuf::internal::ConstantInitialized);

  inline ReplicateInfo(const ReplicateInfo& from)
      : ReplicateInfo(nullptr, from) {}
  ReplicateInfo(ReplicateInfo&& from) noexcept
    : ReplicateInfo() {
    *this = ::std::move(from);
  }

  inline ReplicateInfo& operator=(const ReplicateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateInfo& operator=(ReplicateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateInfo* internal_default_instance() {
    return reinterpret_cast<const ReplicateInfo*>(
               &_ReplicateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplicateInfo& a, ReplicateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicateInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReplicateInfo& from) {
    ReplicateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReplicateInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.ReplicateInfo";
  }
  protected:
  explicit ReplicateInfo(::google::protobuf::Arena* arena);
  ReplicateInfo(::google::protobuf::Arena* arena, const ReplicateInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTimestampFieldNumber = 2,
    kIsReplicateFieldNumber = 1,
  };
  // uint64 msgTimestamp = 2;
  void clear_msgtimestamp() ;
  ::uint64_t msgtimestamp() const;
  void set_msgtimestamp(::uint64_t value);

  private:
  ::uint64_t _internal_msgtimestamp() const;
  void _internal_set_msgtimestamp(::uint64_t value);

  public:
  // bool isReplicate = 1;
  void clear_isreplicate() ;
  bool isreplicate() const;
  void set_isreplicate(bool value);

  private:
  bool _internal_isreplicate() const;
  void _internal_set_isreplicate(bool value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.ReplicateInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t msgtimestamp_;
    bool isreplicate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class PrivilegeExt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PrivilegeExt) */ {
 public:
  inline PrivilegeExt() : PrivilegeExt(nullptr) {}
  ~PrivilegeExt() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrivilegeExt(::google::protobuf::internal::ConstantInitialized);

  inline PrivilegeExt(const PrivilegeExt& from)
      : PrivilegeExt(nullptr, from) {}
  PrivilegeExt(PrivilegeExt&& from) noexcept
    : PrivilegeExt() {
    *this = ::std::move(from);
  }

  inline PrivilegeExt& operator=(const PrivilegeExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivilegeExt& operator=(PrivilegeExt&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivilegeExt& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivilegeExt* internal_default_instance() {
    return reinterpret_cast<const PrivilegeExt*>(
               &_PrivilegeExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PrivilegeExt& a, PrivilegeExt& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivilegeExt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivilegeExt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivilegeExt* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivilegeExt>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrivilegeExt& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PrivilegeExt& from) {
    PrivilegeExt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrivilegeExt* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.PrivilegeExt";
  }
  protected:
  explicit PrivilegeExt(::google::protobuf::Arena* arena);
  PrivilegeExt(::google::protobuf::Arena* arena, const PrivilegeExt& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 1,
    kObjectPrivilegeFieldNumber = 2,
    kObjectNameIndexFieldNumber = 3,
    kObjectNameIndexsFieldNumber = 4,
  };
  // .milvus.proto.common.ObjectType object_type = 1;
  void clear_object_type() ;
  ::milvus::proto::common::ObjectType object_type() const;
  void set_object_type(::milvus::proto::common::ObjectType value);

  private:
  ::milvus::proto::common::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::milvus::proto::common::ObjectType value);

  public:
  // .milvus.proto.common.ObjectPrivilege object_privilege = 2;
  void clear_object_privilege() ;
  ::milvus::proto::common::ObjectPrivilege object_privilege() const;
  void set_object_privilege(::milvus::proto::common::ObjectPrivilege value);

  private:
  ::milvus::proto::common::ObjectPrivilege _internal_object_privilege() const;
  void _internal_set_object_privilege(::milvus::proto::common::ObjectPrivilege value);

  public:
  // int32 object_name_index = 3;
  void clear_object_name_index() ;
  ::int32_t object_name_index() const;
  void set_object_name_index(::int32_t value);

  private:
  ::int32_t _internal_object_name_index() const;
  void _internal_set_object_name_index(::int32_t value);

  public:
  // int32 object_name_indexs = 4;
  void clear_object_name_indexs() ;
  ::int32_t object_name_indexs() const;
  void set_object_name_indexs(::int32_t value);

  private:
  ::int32_t _internal_object_name_indexs() const;
  void _internal_set_object_name_indexs(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.PrivilegeExt)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int object_type_;
    int object_privilege_;
    ::int32_t object_name_index_;
    ::int32_t object_name_indexs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class PlaceholderValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PlaceholderValue) */ {
 public:
  inline PlaceholderValue() : PlaceholderValue(nullptr) {}
  ~PlaceholderValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlaceholderValue(::google::protobuf::internal::ConstantInitialized);

  inline PlaceholderValue(const PlaceholderValue& from)
      : PlaceholderValue(nullptr, from) {}
  PlaceholderValue(PlaceholderValue&& from) noexcept
    : PlaceholderValue() {
    *this = ::std::move(from);
  }

  inline PlaceholderValue& operator=(const PlaceholderValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderValue& operator=(PlaceholderValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderValue* internal_default_instance() {
    return reinterpret_cast<const PlaceholderValue*>(
               &_PlaceholderValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlaceholderValue& a, PlaceholderValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceholderValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaceholderValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlaceholderValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlaceholderValue& from) {
    PlaceholderValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlaceholderValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.PlaceholderValue";
  }
  protected:
  explicit PlaceholderValue(::google::protobuf::Arena* arena);
  PlaceholderValue(::google::protobuf::Arena* arena, const PlaceholderValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kTagFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated bytes values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, std::size_t size);
  void set_values(int index, absl::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, std::size_t size);
  void add_values(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // .milvus.proto.common.PlaceholderType type = 2;
  void clear_type() ;
  ::milvus::proto::common::PlaceholderType type() const;
  void set_type(::milvus::proto::common::PlaceholderType value);

  private:
  ::milvus::proto::common::PlaceholderType _internal_type() const;
  void _internal_set_type(::milvus::proto::common::PlaceholderType value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.PlaceholderValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::ArenaStringPtr tag_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class MsgBase_PropertiesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          MsgBase_PropertiesEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      MsgBase_PropertiesEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MsgBase_PropertiesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBase_PropertiesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MsgBase_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MsgBase_PropertiesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MsgBase_PropertiesEntry_DoNotUse*>(
        &_MsgBase_PropertiesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.MsgBase.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.MsgBase.PropertiesEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {}
  ~KeyValuePair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValuePair(::google::protobuf::internal::ConstantInitialized);

  inline KeyValuePair(const KeyValuePair& from)
      : KeyValuePair(nullptr, from) {}
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValuePair* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValuePair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KeyValuePair& from) {
    KeyValuePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KeyValuePair* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::google::protobuf::Arena* arena);
  KeyValuePair(::google::protobuf::Arena* arena, const KeyValuePair& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.KeyValuePair)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class KeyDataPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.KeyDataPair) */ {
 public:
  inline KeyDataPair() : KeyDataPair(nullptr) {}
  ~KeyDataPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyDataPair(::google::protobuf::internal::ConstantInitialized);

  inline KeyDataPair(const KeyDataPair& from)
      : KeyDataPair(nullptr, from) {}
  KeyDataPair(KeyDataPair&& from) noexcept
    : KeyDataPair() {
    *this = ::std::move(from);
  }

  inline KeyDataPair& operator=(const KeyDataPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDataPair& operator=(KeyDataPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyDataPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDataPair* internal_default_instance() {
    return reinterpret_cast<const KeyDataPair*>(
               &_KeyDataPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyDataPair& a, KeyDataPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDataPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDataPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyDataPair* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyDataPair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyDataPair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KeyDataPair& from) {
    KeyDataPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KeyDataPair* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.KeyDataPair";
  }
  protected:
  explicit KeyDataPair(::google::protobuf::Arena* arena);
  KeyDataPair(::google::protobuf::Arena* arena, const KeyDataPair& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.KeyDataPair)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class ClientInfo_ReservedEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ClientInfo_ReservedEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ClientInfo_ReservedEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ClientInfo_ReservedEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientInfo_ReservedEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ClientInfo_ReservedEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ClientInfo_ReservedEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ClientInfo_ReservedEntry_DoNotUse*>(
        &_ClientInfo_ReservedEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.ClientInfo.ReservedEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "milvus.proto.common.ClientInfo.ReservedEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Blob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Blob) */ {
 public:
  inline Blob() : Blob(nullptr) {}
  ~Blob() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Blob(::google::protobuf::internal::ConstantInitialized);

  inline Blob(const Blob& from)
      : Blob(nullptr, from) {}
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blob& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blob* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Blob* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Blob& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Blob& from) {
    Blob::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Blob* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.Blob";
  }
  protected:
  explicit Blob(::google::protobuf::Arena* arena);
  Blob(::google::protobuf::Arena* arena, const Blob& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.Blob)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class Address final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Address(::google::protobuf::internal::ConstantInitialized);

  inline Address(const Address& from)
      : Address(nullptr, from) {}
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Address* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Address& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Address& from) {
    Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Address* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.Address";
  }
  protected:
  explicit Address(::google::protobuf::Arena* arena);
  Address(::google::protobuf::Arena* arena, const Address& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // int64 port = 2;
  void clear_port() ;
  ::int64_t port() const;
  void set_port(::int64_t value);

  private:
  ::int64_t _internal_port() const;
  void _internal_set_port(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.Address)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::int64_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class ServerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo(::google::protobuf::internal::ConstantInitialized);

  inline ServerInfo(const ServerInfo& from)
      : ServerInfo(nullptr, from) {}
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.ServerInfo";
  }
  protected:
  explicit ServerInfo(::google::protobuf::Arena* arena);
  ServerInfo(::google::protobuf::Arena* arena, const ServerInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 6,
    kBuildTagsFieldNumber = 1,
    kBuildTimeFieldNumber = 2,
    kGitCommitFieldNumber = 3,
    kGoVersionFieldNumber = 4,
    kDeployModeFieldNumber = 5,
  };
  // map<string, string> reserved = 6;
  int reserved_size() const;
  private:
  int _internal_reserved_size() const;

  public:
  void clear_reserved() ;
  const ::google::protobuf::Map<std::string, std::string>& reserved() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_reserved();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_reserved() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_reserved();

  public:
  // string build_tags = 1;
  void clear_build_tags() ;
  const std::string& build_tags() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_build_tags(Arg_&& arg, Args_... args);
  std::string* mutable_build_tags();
  PROTOBUF_NODISCARD std::string* release_build_tags();
  void set_allocated_build_tags(std::string* value);

  private:
  const std::string& _internal_build_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_tags(
      const std::string& value);
  std::string* _internal_mutable_build_tags();

  public:
  // string build_time = 2;
  void clear_build_time() ;
  const std::string& build_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_build_time(Arg_&& arg, Args_... args);
  std::string* mutable_build_time();
  PROTOBUF_NODISCARD std::string* release_build_time();
  void set_allocated_build_time(std::string* value);

  private:
  const std::string& _internal_build_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_time(
      const std::string& value);
  std::string* _internal_mutable_build_time();

  public:
  // string git_commit = 3;
  void clear_git_commit() ;
  const std::string& git_commit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_git_commit(Arg_&& arg, Args_... args);
  std::string* mutable_git_commit();
  PROTOBUF_NODISCARD std::string* release_git_commit();
  void set_allocated_git_commit(std::string* value);

  private:
  const std::string& _internal_git_commit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_git_commit(
      const std::string& value);
  std::string* _internal_mutable_git_commit();

  public:
  // string go_version = 4;
  void clear_go_version() ;
  const std::string& go_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_go_version(Arg_&& arg, Args_... args);
  std::string* mutable_go_version();
  PROTOBUF_NODISCARD std::string* release_go_version();
  void set_allocated_go_version(std::string* value);

  private:
  const std::string& _internal_go_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_go_version(
      const std::string& value);
  std::string* _internal_mutable_go_version();

  public:
  // string deploy_mode = 5;
  void clear_deploy_mode() ;
  const std::string& deploy_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deploy_mode(Arg_&& arg, Args_... args);
  std::string* mutable_deploy_mode();
  PROTOBUF_NODISCARD std::string* release_deploy_mode();
  void set_allocated_deploy_mode(std::string* value);

  private:
  const std::string& _internal_deploy_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deploy_mode(
      const std::string& value);
  std::string* _internal_mutable_deploy_mode();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.ServerInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      98, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<ServerInfo_ReservedEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        reserved_;
    ::google::protobuf::internal::ArenaStringPtr build_tags_;
    ::google::protobuf::internal::ArenaStringPtr build_time_;
    ::google::protobuf::internal::ArenaStringPtr git_commit_;
    ::google::protobuf::internal::ArenaStringPtr go_version_;
    ::google::protobuf::internal::ArenaStringPtr deploy_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class PlaceholderGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PlaceholderGroup) */ {
 public:
  inline PlaceholderGroup() : PlaceholderGroup(nullptr) {}
  ~PlaceholderGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlaceholderGroup(::google::protobuf::internal::ConstantInitialized);

  inline PlaceholderGroup(const PlaceholderGroup& from)
      : PlaceholderGroup(nullptr, from) {}
  PlaceholderGroup(PlaceholderGroup&& from) noexcept
    : PlaceholderGroup() {
    *this = ::std::move(from);
  }

  inline PlaceholderGroup& operator=(const PlaceholderGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderGroup& operator=(PlaceholderGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderGroup* internal_default_instance() {
    return reinterpret_cast<const PlaceholderGroup*>(
               &_PlaceholderGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlaceholderGroup& a, PlaceholderGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceholderGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaceholderGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlaceholderGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlaceholderGroup& from) {
    PlaceholderGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlaceholderGroup* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.PlaceholderGroup";
  }
  protected:
  explicit PlaceholderGroup(::google::protobuf::Arena* arena);
  PlaceholderGroup(::google::protobuf::Arena* arena, const PlaceholderGroup& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 1,
  };
  // repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;

  public:
  void clear_placeholders() ;
  ::milvus::proto::common::PlaceholderValue* mutable_placeholders(int index);
  ::google::protobuf::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >*
      mutable_placeholders();
  private:
  const ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>& _internal_placeholders() const;
  ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>* _internal_mutable_placeholders();
  public:
  const ::milvus::proto::common::PlaceholderValue& placeholders(int index) const;
  ::milvus::proto::common::PlaceholderValue* add_placeholders();
  const ::google::protobuf::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >&
      placeholders() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.common.PlaceholderGroup)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue > placeholders_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class MsgBase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.MsgBase) */ {
 public:
  inline MsgBase() : MsgBase(nullptr) {}
  ~MsgBase() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBase(::google::protobuf::internal::ConstantInitialized);

  inline MsgBase(const MsgBase& from)
      : MsgBase(nullptr, from) {}
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgBase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MsgBase& from) {
    MsgBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MsgBase* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.MsgBase";
  }
  protected:
  explicit MsgBase(::google::protobuf::Arena* arena);
  MsgBase(::google::protobuf::Arena* arena, const MsgBase& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 6,
    kReplicateInfoFieldNumber = 7,
    kMsgIDFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSourceIDFieldNumber = 4,
    kTargetIDFieldNumber = 5,
    kMsgTypeFieldNumber = 1,
  };
  // map<string, string> properties = 6;
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  const ::google::protobuf::Map<std::string, std::string>& properties() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_properties();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_properties() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_properties();

  public:
  // .milvus.proto.common.ReplicateInfo replicateInfo = 7;
  bool has_replicateinfo() const;
  void clear_replicateinfo() ;
  const ::milvus::proto::common::ReplicateInfo& replicateinfo() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::ReplicateInfo* release_replicateinfo();
  ::milvus::proto::common::ReplicateInfo* mutable_replicateinfo();
  void set_allocated_replicateinfo(::milvus::proto::common::ReplicateInfo* value);
  void unsafe_arena_set_allocated_replicateinfo(::milvus::proto::common::ReplicateInfo* value);
  ::milvus::proto::common::ReplicateInfo* unsafe_arena_release_replicateinfo();

  private:
  const ::milvus::proto::common::ReplicateInfo& _internal_replicateinfo() const;
  ::milvus::proto::common::ReplicateInfo* _internal_mutable_replicateinfo();

  public:
  // int64 msgID = 2;
  void clear_msgid() ;
  ::int64_t msgid() const;
  void set_msgid(::int64_t value);

  private:
  ::int64_t _internal_msgid() const;
  void _internal_set_msgid(::int64_t value);

  public:
  // uint64 timestamp = 3;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // int64 sourceID = 4;
  void clear_sourceid() ;
  ::int64_t sourceid() const;
  void set_sourceid(::int64_t value);

  private:
  ::int64_t _internal_sourceid() const;
  void _internal_set_sourceid(::int64_t value);

  public:
  // int64 targetID = 5;
  void clear_targetid() ;
  ::int64_t targetid() const;
  void set_targetid(::int64_t value);

  private:
  ::int64_t _internal_targetid() const;
  void _internal_set_targetid(::int64_t value);

  public:
  // .milvus.proto.common.MsgType msg_type = 1;
  void clear_msg_type() ;
  ::milvus::proto::common::MsgType msg_type() const;
  void set_msg_type(::milvus::proto::common::MsgType value);

  private:
  ::milvus::proto::common::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::milvus::proto::common::MsgType value);

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.MsgBase)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<MsgBase_PropertiesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        properties_;
    ::milvus::proto::common::ReplicateInfo* replicateinfo_;
    ::int64_t msgid_;
    ::uint64_t timestamp_;
    ::int64_t sourceid_;
    ::int64_t targetid_;
    int msg_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class ClientInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  ~ClientInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientInfo(::google::protobuf::internal::ConstantInitialized);

  inline ClientInfo(const ClientInfo& from)
      : ClientInfo(nullptr, from) {}
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientInfo& from) {
    ClientInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.ClientInfo";
  }
  protected:
  explicit ClientInfo(::google::protobuf::Arena* arena);
  ClientInfo(::google::protobuf::Arena* arena, const ClientInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 6,
    kSdkTypeFieldNumber = 1,
    kSdkVersionFieldNumber = 2,
    kLocalTimeFieldNumber = 3,
    kUserFieldNumber = 4,
    kHostFieldNumber = 5,
  };
  // map<string, string> reserved = 6;
  int reserved_size() const;
  private:
  int _internal_reserved_size() const;

  public:
  void clear_reserved() ;
  const ::google::protobuf::Map<std::string, std::string>& reserved() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_reserved();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_reserved() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_reserved();

  public:
  // string sdk_type = 1;
  void clear_sdk_type() ;
  const std::string& sdk_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdk_type(Arg_&& arg, Args_... args);
  std::string* mutable_sdk_type();
  PROTOBUF_NODISCARD std::string* release_sdk_type();
  void set_allocated_sdk_type(std::string* value);

  private:
  const std::string& _internal_sdk_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_type(
      const std::string& value);
  std::string* _internal_mutable_sdk_type();

  public:
  // string sdk_version = 2;
  void clear_sdk_version() ;
  const std::string& sdk_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdk_version(Arg_&& arg, Args_... args);
  std::string* mutable_sdk_version();
  PROTOBUF_NODISCARD std::string* release_sdk_version();
  void set_allocated_sdk_version(std::string* value);

  private:
  const std::string& _internal_sdk_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_version(
      const std::string& value);
  std::string* _internal_mutable_sdk_version();

  public:
  // string local_time = 3;
  void clear_local_time() ;
  const std::string& local_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_time(Arg_&& arg, Args_... args);
  std::string* mutable_local_time();
  PROTOBUF_NODISCARD std::string* release_local_time();
  void set_allocated_local_time(std::string* value);

  private:
  const std::string& _internal_local_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_time(
      const std::string& value);
  std::string* _internal_mutable_local_time();

  public:
  // string user = 4;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string host = 5;
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* value);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.ClientInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<ClientInfo_ReservedEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        reserved_;
    ::google::protobuf::internal::ArenaStringPtr sdk_type_;
    ::google::protobuf::internal::ArenaStringPtr sdk_version_;
    ::google::protobuf::internal::ArenaStringPtr local_time_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr host_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class MsgHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgHeader(::google::protobuf::internal::ConstantInitialized);

  inline MsgHeader(const MsgHeader& from)
      : MsgHeader(nullptr, from) {}
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MsgHeader& from) {
    MsgHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MsgHeader* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.MsgHeader";
  }
  protected:
  explicit MsgHeader(::google::protobuf::Arena* arena);
  MsgHeader(::google::protobuf::Arena* arena, const MsgHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* value);
  void unsafe_arena_set_allocated_base(::milvus::proto::common::MsgBase* value);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.MsgHeader)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::milvus::proto::common::MsgBase* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};// -------------------------------------------------------------------

class DMLMsgHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.DMLMsgHeader) */ {
 public:
  inline DMLMsgHeader() : DMLMsgHeader(nullptr) {}
  ~DMLMsgHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DMLMsgHeader(::google::protobuf::internal::ConstantInitialized);

  inline DMLMsgHeader(const DMLMsgHeader& from)
      : DMLMsgHeader(nullptr, from) {}
  DMLMsgHeader(DMLMsgHeader&& from) noexcept
    : DMLMsgHeader() {
    *this = ::std::move(from);
  }

  inline DMLMsgHeader& operator=(const DMLMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DMLMsgHeader& operator=(DMLMsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DMLMsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const DMLMsgHeader* internal_default_instance() {
    return reinterpret_cast<const DMLMsgHeader*>(
               &_DMLMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DMLMsgHeader& a, DMLMsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(DMLMsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DMLMsgHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DMLMsgHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DMLMsgHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DMLMsgHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DMLMsgHeader& from) {
    DMLMsgHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DMLMsgHeader* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "milvus.proto.common.DMLMsgHeader";
  }
  protected:
  explicit DMLMsgHeader(::google::protobuf::Arena* arena);
  DMLMsgHeader(::google::protobuf::Arena* arena, const DMLMsgHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string shardName = 2;
  void clear_shardname() ;
  const std::string& shardname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shardname(Arg_&& arg, Args_... args);
  std::string* mutable_shardname();
  PROTOBUF_NODISCARD std::string* release_shardname();
  void set_allocated_shardname(std::string* value);

  private:
  const std::string& _internal_shardname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shardname(
      const std::string& value);
  std::string* _internal_mutable_shardname();

  public:
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* value);
  void unsafe_arena_set_allocated_base(::milvus::proto::common::MsgBase* value);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:milvus.proto.common.DMLMsgHeader)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr shardname_;
    ::milvus::proto::common::MsgBase* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};

// ===================================================================



static const int kPrivilegeExtObjFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::milvus::proto::common::PrivilegeExt >, 11, false >
  privilege_ext_obj;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Status

// .milvus.proto.common.ErrorCode error_code = 1 [deprecated = true];
inline void Status::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
}
inline ::milvus::proto::common::ErrorCode Status::error_code() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.error_code)
  return _internal_error_code();
}
inline void Status::set_error_code(::milvus::proto::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.error_code)
}
inline ::milvus::proto::common::ErrorCode Status::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::milvus::proto::common::ErrorCode>(_impl_.error_code_);
}
inline void Status::_internal_set_error_code(::milvus::proto::common::ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// string reason = 2;
inline void Status::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Status::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.reason)
}
inline std::string* Status::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Status.reason)
  return _s;
}
inline const std::string& Status::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void Status::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* Status::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.Status.reason)
  return _impl_.reason_.Release();
}
inline void Status::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Status.reason)
}

// int32 code = 3;
inline void Status::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::int32_t Status::code() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.code)
  return _internal_code();
}
inline void Status::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.code)
}
inline ::int32_t Status::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void Status::_internal_set_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// bool retriable = 4;
inline void Status::clear_retriable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.retriable_ = false;
}
inline bool Status::retriable() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.retriable)
  return _internal_retriable();
}
inline void Status::set_retriable(bool value) {
  _internal_set_retriable(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.retriable)
}
inline bool Status::_internal_retriable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.retriable_;
}
inline void Status::_internal_set_retriable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.retriable_ = value;
}

// string detail = 5;
inline void Status::clear_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& Status::detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.detail)
  return _internal_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_detail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.detail)
}
inline std::string* Status::mutable_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Status.detail)
  return _s;
}
inline const std::string& Status::_internal_detail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detail_.Get();
}
inline void Status::_internal_set_detail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detail_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.detail_.Mutable( GetArena());
}
inline std::string* Status::release_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.Status.detail)
  return _impl_.detail_.Release();
}
inline void Status::set_allocated_detail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detail_.IsDefault()) {
          _impl_.detail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Status.detail)
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValuePair::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyValuePair.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValuePair::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyValuePair.key)
  return _s;
}
inline const std::string& KeyValuePair::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KeyValuePair::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyValuePair.key)
  return _impl_.key_.Release();
}
inline void KeyValuePair::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KeyValuePair::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyValuePair.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValuePair::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyValuePair.value)
  return _s;
}
inline const std::string& KeyValuePair::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* KeyValuePair::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyValuePair.value)
  return _impl_.value_.Release();
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyValuePair.value)
}

// -------------------------------------------------------------------

// KeyDataPair

// string key = 1;
inline void KeyDataPair::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyDataPair::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyDataPair.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyDataPair::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyDataPair.key)
}
inline std::string* KeyDataPair::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyDataPair.key)
  return _s;
}
inline const std::string& KeyDataPair::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void KeyDataPair::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KeyDataPair::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KeyDataPair::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyDataPair.key)
  return _impl_.key_.Release();
}
inline void KeyDataPair::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyDataPair.key)
}

// bytes data = 2;
inline void KeyDataPair::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& KeyDataPair::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyDataPair.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyDataPair::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyDataPair.data)
}
inline std::string* KeyDataPair::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyDataPair.data)
  return _s;
}
inline const std::string& KeyDataPair::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void KeyDataPair::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* KeyDataPair::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* KeyDataPair::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyDataPair.data)
  return _impl_.data_.Release();
}
inline void KeyDataPair::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyDataPair.data)
}

// -------------------------------------------------------------------

// Blob

// bytes value = 1;
inline void Blob::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Blob::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Blob.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Blob::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Blob.value)
}
inline std::string* Blob::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Blob.value)
  return _s;
}
inline const std::string& Blob::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Blob::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Blob::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Blob::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.Blob.value)
  return _impl_.value_.Release();
}
inline void Blob::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Blob.value)
}

// -------------------------------------------------------------------

// PlaceholderValue

// string tag = 1;
inline void PlaceholderValue::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& PlaceholderValue::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlaceholderValue::set_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.tag)
}
inline std::string* PlaceholderValue::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderValue.tag)
  return _s;
}
inline const std::string& PlaceholderValue::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.Get();
}
inline void PlaceholderValue::_internal_set_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* PlaceholderValue::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* PlaceholderValue::release_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.PlaceholderValue.tag)
  return _impl_.tag_.Release();
}
inline void PlaceholderValue::set_allocated_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.PlaceholderValue.tag)
}

// .milvus.proto.common.PlaceholderType type = 2;
inline void PlaceholderValue::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::milvus::proto::common::PlaceholderType PlaceholderValue::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.type)
  return _internal_type();
}
inline void PlaceholderValue::set_type(::milvus::proto::common::PlaceholderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.type)
}
inline ::milvus::proto::common::PlaceholderType PlaceholderValue::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::milvus::proto::common::PlaceholderType>(_impl_.type_);
}
inline void PlaceholderValue::_internal_set_type(::milvus::proto::common::PlaceholderType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// repeated bytes values = 3;
inline int PlaceholderValue::_internal_values_size() const {
  return _internal_values().size();
}
inline int PlaceholderValue::values_size() const {
  return _internal_values_size();
}
inline void PlaceholderValue::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* PlaceholderValue::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.common.PlaceholderValue.values)
  return _s;
}
inline const std::string& PlaceholderValue::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.values)
  return _internal_values().Get(index);
}
inline std::string* PlaceholderValue::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderValue.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void PlaceholderValue::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, absl::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:milvus.proto.common.PlaceholderValue.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaceholderValue::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:milvus.proto.common.PlaceholderValue.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaceholderValue::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.common.PlaceholderValue.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaceholderValue::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaceholderValue::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// PlaceholderGroup

// repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
inline int PlaceholderGroup::_internal_placeholders_size() const {
  return _internal_placeholders().size();
}
inline int PlaceholderGroup::placeholders_size() const {
  return _internal_placeholders_size();
}
inline void PlaceholderGroup::clear_placeholders() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.placeholders_.Clear();
}
inline ::milvus::proto::common::PlaceholderValue* PlaceholderGroup::mutable_placeholders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderGroup.placeholders)
  return _internal_mutable_placeholders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>* PlaceholderGroup::mutable_placeholders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.common.PlaceholderGroup.placeholders)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_placeholders();
}
inline const ::milvus::proto::common::PlaceholderValue& PlaceholderGroup::placeholders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderGroup.placeholders)
  return _internal_placeholders().Get(index);
}
inline ::milvus::proto::common::PlaceholderValue* PlaceholderGroup::add_placeholders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::milvus::proto::common::PlaceholderValue* _add = _internal_mutable_placeholders()->Add();
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderGroup.placeholders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>& PlaceholderGroup::placeholders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:milvus.proto.common.PlaceholderGroup.placeholders)
  return _internal_placeholders();
}
inline const ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>&
PlaceholderGroup::_internal_placeholders() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.placeholders_;
}
inline ::google::protobuf::RepeatedPtrField<::milvus::proto::common::PlaceholderValue>*
PlaceholderGroup::_internal_mutable_placeholders() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.placeholders_;
}

// -------------------------------------------------------------------

// Address

// string ip = 1;
inline void Address::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& Address::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Address.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Address::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Address.ip)
}
inline std::string* Address::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Address.ip)
  return _s;
}
inline const std::string& Address::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void Address::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* Address::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* Address::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.Address.ip)
  return _impl_.ip_.Release();
}
inline void Address::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Address.ip)
}

// int64 port = 2;
inline void Address::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = ::int64_t{0};
}
inline ::int64_t Address::port() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Address.port)
  return _internal_port();
}
inline void Address::set_port(::int64_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Address.port)
}
inline ::int64_t Address::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void Address::_internal_set_port(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MsgBase

// .milvus.proto.common.MsgType msg_type = 1;
inline void MsgBase::clear_msg_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_type_ = 0;
}
inline ::milvus::proto::common::MsgType MsgBase::msg_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.msg_type)
  return _internal_msg_type();
}
inline void MsgBase::set_msg_type(::milvus::proto::common::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.msg_type)
}
inline ::milvus::proto::common::MsgType MsgBase::_internal_msg_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::milvus::proto::common::MsgType>(_impl_.msg_type_);
}
inline void MsgBase::_internal_set_msg_type(::milvus::proto::common::MsgType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_type_ = value;
}

// int64 msgID = 2;
inline void MsgBase::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = ::int64_t{0};
}
inline ::int64_t MsgBase::msgid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.msgID)
  return _internal_msgid();
}
inline void MsgBase::set_msgid(::int64_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.msgID)
}
inline ::int64_t MsgBase::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msgid_;
}
inline void MsgBase::_internal_set_msgid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgid_ = value;
}

// uint64 timestamp = 3;
inline void MsgBase::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t MsgBase::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.timestamp)
  return _internal_timestamp();
}
inline void MsgBase::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.timestamp)
}
inline ::uint64_t MsgBase::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void MsgBase::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 sourceID = 4;
inline void MsgBase::clear_sourceid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sourceid_ = ::int64_t{0};
}
inline ::int64_t MsgBase::sourceid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.sourceID)
  return _internal_sourceid();
}
inline void MsgBase::set_sourceid(::int64_t value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.sourceID)
}
inline ::int64_t MsgBase::_internal_sourceid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sourceid_;
}
inline void MsgBase::_internal_set_sourceid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sourceid_ = value;
}

// int64 targetID = 5;
inline void MsgBase::clear_targetid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetid_ = ::int64_t{0};
}
inline ::int64_t MsgBase::targetid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.targetID)
  return _internal_targetid();
}
inline void MsgBase::set_targetid(::int64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.targetID)
}
inline ::int64_t MsgBase::_internal_targetid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targetid_;
}
inline void MsgBase::_internal_set_targetid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.targetid_ = value;
}

// map<string, string> properties = 6;
inline int MsgBase::_internal_properties_size() const {
  return _internal_properties().size();
}
inline int MsgBase::properties_size() const {
  return _internal_properties_size();
}
inline void MsgBase::clear_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.properties_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MsgBase::_internal_properties() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.properties_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MsgBase::properties() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:milvus.proto.common.MsgBase.properties)
  return _internal_properties();
}
inline ::google::protobuf::Map<std::string, std::string>* MsgBase::_internal_mutable_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.properties_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MsgBase::mutable_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.common.MsgBase.properties)
  return _internal_mutable_properties();
}

// .milvus.proto.common.ReplicateInfo replicateInfo = 7;
inline bool MsgBase::has_replicateinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replicateinfo_ != nullptr);
  return value;
}
inline void MsgBase::clear_replicateinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.replicateinfo_ != nullptr) _impl_.replicateinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::milvus::proto::common::ReplicateInfo& MsgBase::_internal_replicateinfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::milvus::proto::common::ReplicateInfo* p = _impl_.replicateinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::ReplicateInfo&>(::milvus::proto::common::_ReplicateInfo_default_instance_);
}
inline const ::milvus::proto::common::ReplicateInfo& MsgBase::replicateinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.replicateInfo)
  return _internal_replicateinfo();
}
inline void MsgBase::unsafe_arena_set_allocated_replicateinfo(::milvus::proto::common::ReplicateInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.replicateinfo_);
  }
  _impl_.replicateinfo_ = reinterpret_cast<::milvus::proto::common::ReplicateInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.common.MsgBase.replicateInfo)
}
inline ::milvus::proto::common::ReplicateInfo* MsgBase::release_replicateinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::ReplicateInfo* released = _impl_.replicateinfo_;
  _impl_.replicateinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::milvus::proto::common::ReplicateInfo* MsgBase::unsafe_arena_release_replicateinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.MsgBase.replicateInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::ReplicateInfo* temp = _impl_.replicateinfo_;
  _impl_.replicateinfo_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::ReplicateInfo* MsgBase::_internal_mutable_replicateinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.replicateinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::ReplicateInfo>(GetArena());
    _impl_.replicateinfo_ = reinterpret_cast<::milvus::proto::common::ReplicateInfo*>(p);
  }
  return _impl_.replicateinfo_;
}
inline ::milvus::proto::common::ReplicateInfo* MsgBase::mutable_replicateinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::milvus::proto::common::ReplicateInfo* _msg = _internal_mutable_replicateinfo();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.MsgBase.replicateInfo)
  return _msg;
}
inline void MsgBase::set_allocated_replicateinfo(::milvus::proto::common::ReplicateInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::milvus::proto::common::ReplicateInfo*>(_impl_.replicateinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::milvus::proto::common::ReplicateInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.replicateinfo_ = reinterpret_cast<::milvus::proto::common::ReplicateInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.MsgBase.replicateInfo)
}

// -------------------------------------------------------------------

// ReplicateInfo

// bool isReplicate = 1;
inline void ReplicateInfo::clear_isreplicate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isreplicate_ = false;
}
inline bool ReplicateInfo::isreplicate() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ReplicateInfo.isReplicate)
  return _internal_isreplicate();
}
inline void ReplicateInfo::set_isreplicate(bool value) {
  _internal_set_isreplicate(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.ReplicateInfo.isReplicate)
}
inline bool ReplicateInfo::_internal_isreplicate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isreplicate_;
}
inline void ReplicateInfo::_internal_set_isreplicate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isreplicate_ = value;
}

// uint64 msgTimestamp = 2;
inline void ReplicateInfo::clear_msgtimestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgtimestamp_ = ::uint64_t{0u};
}
inline ::uint64_t ReplicateInfo::msgtimestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ReplicateInfo.msgTimestamp)
  return _internal_msgtimestamp();
}
inline void ReplicateInfo::set_msgtimestamp(::uint64_t value) {
  _internal_set_msgtimestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.ReplicateInfo.msgTimestamp)
}
inline ::uint64_t ReplicateInfo::_internal_msgtimestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msgtimestamp_;
}
inline void ReplicateInfo::_internal_set_msgtimestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgtimestamp_ = value;
}

// -------------------------------------------------------------------

// MsgHeader

// .milvus.proto.common.MsgBase base = 1;
inline bool MsgHeader::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline void MsgHeader::clear_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::milvus::proto::common::MsgBase& MsgHeader::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& MsgHeader::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgHeader.base)
  return _internal_base();
}
inline void MsgHeader::unsafe_arena_set_allocated_base(::milvus::proto::common::MsgBase* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.common.MsgHeader.base)
}
inline ::milvus::proto::common::MsgBase* MsgHeader::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::MsgBase* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.MsgHeader.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(p);
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.MsgHeader.base)
  return _msg;
}
inline void MsgHeader::set_allocated_base(::milvus::proto::common::MsgBase* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::milvus::proto::common::MsgBase*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::milvus::proto::common::MsgBase*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(value);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.MsgHeader.base)
}

// -------------------------------------------------------------------

// DMLMsgHeader

// .milvus.proto.common.MsgBase base = 1;
inline bool DMLMsgHeader::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline void DMLMsgHeader::clear_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::milvus::proto::common::MsgBase& DMLMsgHeader::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DMLMsgHeader::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.DMLMsgHeader.base)
  return _internal_base();
}
inline void DMLMsgHeader::unsafe_arena_set_allocated_base(::milvus::proto::common::MsgBase* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.common.DMLMsgHeader.base)
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::MsgBase* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.DMLMsgHeader.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(p);
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.DMLMsgHeader.base)
  return _msg;
}
inline void DMLMsgHeader::set_allocated_base(::milvus::proto::common::MsgBase* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::milvus::proto::common::MsgBase*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::milvus::proto::common::MsgBase*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::milvus::proto::common::MsgBase*>(value);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.DMLMsgHeader.base)
}

// string shardName = 2;
inline void DMLMsgHeader::clear_shardname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shardname_.ClearToEmpty();
}
inline const std::string& DMLMsgHeader::shardname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.DMLMsgHeader.shardName)
  return _internal_shardname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DMLMsgHeader::set_shardname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shardname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.DMLMsgHeader.shardName)
}
inline std::string* DMLMsgHeader::mutable_shardname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shardname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.DMLMsgHeader.shardName)
  return _s;
}
inline const std::string& DMLMsgHeader::_internal_shardname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shardname_.Get();
}
inline void DMLMsgHeader::_internal_set_shardname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shardname_.Set(value, GetArena());
}
inline std::string* DMLMsgHeader::_internal_mutable_shardname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.shardname_.Mutable( GetArena());
}
inline std::string* DMLMsgHeader::release_shardname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.DMLMsgHeader.shardName)
  return _impl_.shardname_.Release();
}
inline void DMLMsgHeader::set_allocated_shardname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shardname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shardname_.IsDefault()) {
          _impl_.shardname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.DMLMsgHeader.shardName)
}

// -------------------------------------------------------------------

// PrivilegeExt

// .milvus.proto.common.ObjectType object_type = 1;
inline void PrivilegeExt::clear_object_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_type_ = 0;
}
inline ::milvus::proto::common::ObjectType PrivilegeExt::object_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.object_type)
  return _internal_object_type();
}
inline void PrivilegeExt::set_object_type(::milvus::proto::common::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.object_type)
}
inline ::milvus::proto::common::ObjectType PrivilegeExt::_internal_object_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::milvus::proto::common::ObjectType>(_impl_.object_type_);
}
inline void PrivilegeExt::_internal_set_object_type(::milvus::proto::common::ObjectType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_type_ = value;
}

// .milvus.proto.common.ObjectPrivilege object_privilege = 2;
inline void PrivilegeExt::clear_object_privilege() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_privilege_ = 0;
}
inline ::milvus::proto::common::ObjectPrivilege PrivilegeExt::object_privilege() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.object_privilege)
  return _internal_object_privilege();
}
inline void PrivilegeExt::set_object_privilege(::milvus::proto::common::ObjectPrivilege value) {
  _internal_set_object_privilege(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.object_privilege)
}
inline ::milvus::proto::common::ObjectPrivilege PrivilegeExt::_internal_object_privilege() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::milvus::proto::common::ObjectPrivilege>(_impl_.object_privilege_);
}
inline void PrivilegeExt::_internal_set_object_privilege(::milvus::proto::common::ObjectPrivilege value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_privilege_ = value;
}

// int32 object_name_index = 3;
inline void PrivilegeExt::clear_object_name_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_name_index_ = 0;
}
inline ::int32_t PrivilegeExt::object_name_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.object_name_index)
  return _internal_object_name_index();
}
inline void PrivilegeExt::set_object_name_index(::int32_t value) {
  _internal_set_object_name_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.object_name_index)
}
inline ::int32_t PrivilegeExt::_internal_object_name_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.object_name_index_;
}
inline void PrivilegeExt::_internal_set_object_name_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_name_index_ = value;
}

// int32 object_name_indexs = 4;
inline void PrivilegeExt::clear_object_name_indexs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_name_indexs_ = 0;
}
inline ::int32_t PrivilegeExt::object_name_indexs() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.object_name_indexs)
  return _internal_object_name_indexs();
}
inline void PrivilegeExt::set_object_name_indexs(::int32_t value) {
  _internal_set_object_name_indexs(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.object_name_indexs)
}
inline ::int32_t PrivilegeExt::_internal_object_name_indexs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.object_name_indexs_;
}
inline void PrivilegeExt::_internal_set_object_name_indexs(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_name_indexs_ = value;
}

// -------------------------------------------------------------------

// SegmentStats

// int64 SegmentID = 1;
inline void SegmentStats::clear_segmentid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.segmentid_ = ::int64_t{0};
}
inline ::int64_t SegmentStats::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.SegmentStats.SegmentID)
  return _internal_segmentid();
}
inline void SegmentStats::set_segmentid(::int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.SegmentStats.SegmentID)
}
inline ::int64_t SegmentStats::_internal_segmentid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.segmentid_;
}
inline void SegmentStats::_internal_set_segmentid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.segmentid_ = value;
}

// int64 NumRows = 2;
inline void SegmentStats::clear_numrows() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.numrows_ = ::int64_t{0};
}
inline ::int64_t SegmentStats::numrows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.SegmentStats.NumRows)
  return _internal_numrows();
}
inline void SegmentStats::set_numrows(::int64_t value) {
  _internal_set_numrows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.SegmentStats.NumRows)
}
inline ::int64_t SegmentStats::_internal_numrows() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.numrows_;
}
inline void SegmentStats::_internal_set_numrows(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.numrows_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClientInfo

// string sdk_type = 1;
inline void ClientInfo::clear_sdk_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sdk_type_.ClearToEmpty();
}
inline const std::string& ClientInfo::sdk_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ClientInfo.sdk_type)
  return _internal_sdk_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_sdk_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sdk_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ClientInfo.sdk_type)
}
inline std::string* ClientInfo::mutable_sdk_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdk_type();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ClientInfo.sdk_type)
  return _s;
}
inline const std::string& ClientInfo::_internal_sdk_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sdk_type_.Get();
}
inline void ClientInfo::_internal_set_sdk_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sdk_type_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_sdk_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sdk_type_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_sdk_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ClientInfo.sdk_type)
  return _impl_.sdk_type_.Release();
}
inline void ClientInfo::set_allocated_sdk_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sdk_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sdk_type_.IsDefault()) {
          _impl_.sdk_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ClientInfo.sdk_type)
}

// string sdk_version = 2;
inline void ClientInfo::clear_sdk_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sdk_version_.ClearToEmpty();
}
inline const std::string& ClientInfo::sdk_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ClientInfo.sdk_version)
  return _internal_sdk_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_sdk_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sdk_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ClientInfo.sdk_version)
}
inline std::string* ClientInfo::mutable_sdk_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdk_version();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ClientInfo.sdk_version)
  return _s;
}
inline const std::string& ClientInfo::_internal_sdk_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sdk_version_.Get();
}
inline void ClientInfo::_internal_set_sdk_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sdk_version_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_sdk_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sdk_version_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_sdk_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ClientInfo.sdk_version)
  return _impl_.sdk_version_.Release();
}
inline void ClientInfo::set_allocated_sdk_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sdk_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sdk_version_.IsDefault()) {
          _impl_.sdk_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ClientInfo.sdk_version)
}

// string local_time = 3;
inline void ClientInfo::clear_local_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_time_.ClearToEmpty();
}
inline const std::string& ClientInfo::local_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ClientInfo.local_time)
  return _internal_local_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_local_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ClientInfo.local_time)
}
inline std::string* ClientInfo::mutable_local_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_local_time();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ClientInfo.local_time)
  return _s;
}
inline const std::string& ClientInfo::_internal_local_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_time_.Get();
}
inline void ClientInfo::_internal_set_local_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_time_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_local_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_time_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_local_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ClientInfo.local_time)
  return _impl_.local_time_.Release();
}
inline void ClientInfo::set_allocated_local_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_time_.IsDefault()) {
          _impl_.local_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ClientInfo.local_time)
}

// string user = 4;
inline void ClientInfo::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.ClearToEmpty();
}
inline const std::string& ClientInfo::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ClientInfo.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ClientInfo.user)
}
inline std::string* ClientInfo::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ClientInfo.user)
  return _s;
}
inline const std::string& ClientInfo::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_.Get();
}
inline void ClientInfo::_internal_set_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ClientInfo.user)
  return _impl_.user_.Release();
}
inline void ClientInfo::set_allocated_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ClientInfo.user)
}

// string host = 5;
inline void ClientInfo::clear_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ClientInfo::host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ClientInfo.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ClientInfo.host)
}
inline std::string* ClientInfo::mutable_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ClientInfo.host)
  return _s;
}
inline const std::string& ClientInfo::_internal_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.host_.Get();
}
inline void ClientInfo::_internal_set_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.host_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ClientInfo.host)
  return _impl_.host_.Release();
}
inline void ClientInfo::set_allocated_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ClientInfo.host)
}

// map<string, string> reserved = 6;
inline int ClientInfo::_internal_reserved_size() const {
  return _internal_reserved().size();
}
inline int ClientInfo::reserved_size() const {
  return _internal_reserved_size();
}
inline void ClientInfo::clear_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reserved_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ClientInfo::_internal_reserved() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reserved_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ClientInfo::reserved() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:milvus.proto.common.ClientInfo.reserved)
  return _internal_reserved();
}
inline ::google::protobuf::Map<std::string, std::string>* ClientInfo::_internal_mutable_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.reserved_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ClientInfo::mutable_reserved() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.common.ClientInfo.reserved)
  return _internal_mutable_reserved();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerInfo

// string build_tags = 1;
inline void ServerInfo::clear_build_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.build_tags_.ClearToEmpty();
}
inline const std::string& ServerInfo::build_tags() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ServerInfo.build_tags)
  return _internal_build_tags();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_build_tags(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_tags_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ServerInfo.build_tags)
}
inline std::string* ServerInfo::mutable_build_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_build_tags();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ServerInfo.build_tags)
  return _s;
}
inline const std::string& ServerInfo::_internal_build_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.build_tags_.Get();
}
inline void ServerInfo::_internal_set_build_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_tags_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_build_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.build_tags_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_build_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ServerInfo.build_tags)
  return _impl_.build_tags_.Release();
}
inline void ServerInfo::set_allocated_build_tags(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.build_tags_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.build_tags_.IsDefault()) {
          _impl_.build_tags_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ServerInfo.build_tags)
}

// string build_time = 2;
inline void ServerInfo::clear_build_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.build_time_.ClearToEmpty();
}
inline const std::string& ServerInfo::build_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ServerInfo.build_time)
  return _internal_build_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_build_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ServerInfo.build_time)
}
inline std::string* ServerInfo::mutable_build_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_build_time();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ServerInfo.build_time)
  return _s;
}
inline const std::string& ServerInfo::_internal_build_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.build_time_.Get();
}
inline void ServerInfo::_internal_set_build_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_time_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_build_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.build_time_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_build_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ServerInfo.build_time)
  return _impl_.build_time_.Release();
}
inline void ServerInfo::set_allocated_build_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.build_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.build_time_.IsDefault()) {
          _impl_.build_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ServerInfo.build_time)
}

// string git_commit = 3;
inline void ServerInfo::clear_git_commit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.git_commit_.ClearToEmpty();
}
inline const std::string& ServerInfo::git_commit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ServerInfo.git_commit)
  return _internal_git_commit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_git_commit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.git_commit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ServerInfo.git_commit)
}
inline std::string* ServerInfo::mutable_git_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_git_commit();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ServerInfo.git_commit)
  return _s;
}
inline const std::string& ServerInfo::_internal_git_commit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.git_commit_.Get();
}
inline void ServerInfo::_internal_set_git_commit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.git_commit_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_git_commit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.git_commit_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_git_commit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ServerInfo.git_commit)
  return _impl_.git_commit_.Release();
}
inline void ServerInfo::set_allocated_git_commit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.git_commit_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.git_commit_.IsDefault()) {
          _impl_.git_commit_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ServerInfo.git_commit)
}

// string go_version = 4;
inline void ServerInfo::clear_go_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.go_version_.ClearToEmpty();
}
inline const std::string& ServerInfo::go_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ServerInfo.go_version)
  return _internal_go_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_go_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.go_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ServerInfo.go_version)
}
inline std::string* ServerInfo::mutable_go_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_go_version();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ServerInfo.go_version)
  return _s;
}
inline const std::string& ServerInfo::_internal_go_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.go_version_.Get();
}
inline void ServerInfo::_internal_set_go_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.go_version_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_go_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.go_version_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_go_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ServerInfo.go_version)
  return _impl_.go_version_.Release();
}
inline void ServerInfo::set_allocated_go_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.go_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.go_version_.IsDefault()) {
          _impl_.go_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ServerInfo.go_version)
}

// string deploy_mode = 5;
inline void ServerInfo::clear_deploy_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deploy_mode_.ClearToEmpty();
}
inline const std::string& ServerInfo::deploy_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:milvus.proto.common.ServerInfo.deploy_mode)
  return _internal_deploy_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_deploy_mode(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deploy_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:milvus.proto.common.ServerInfo.deploy_mode)
}
inline std::string* ServerInfo::mutable_deploy_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deploy_mode();
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.ServerInfo.deploy_mode)
  return _s;
}
inline const std::string& ServerInfo::_internal_deploy_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deploy_mode_.Get();
}
inline void ServerInfo::_internal_set_deploy_mode(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deploy_mode_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_deploy_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.deploy_mode_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_deploy_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:milvus.proto.common.ServerInfo.deploy_mode)
  return _impl_.deploy_mode_.Release();
}
inline void ServerInfo::set_allocated_deploy_mode(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deploy_mode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deploy_mode_.IsDefault()) {
          _impl_.deploy_mode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.ServerInfo.deploy_mode)
}

// map<string, string> reserved = 6;
inline int ServerInfo::_internal_reserved_size() const {
  return _internal_reserved().size();
}
inline int ServerInfo::reserved_size() const {
  return _internal_reserved_size();
}
inline void ServerInfo::clear_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reserved_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ServerInfo::_internal_reserved() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reserved_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ServerInfo::reserved() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:milvus.proto.common.ServerInfo.reserved)
  return _internal_reserved();
}
inline ::google::protobuf::Map<std::string, std::string>* ServerInfo::_internal_mutable_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.reserved_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ServerInfo::mutable_reserved() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.common.ServerInfo.reserved)
  return _internal_mutable_reserved();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace proto
}  // namespace milvus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::milvus::proto::common::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::ErrorCode>() {
  return ::milvus::proto::common::ErrorCode_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::IndexState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::IndexState>() {
  return ::milvus::proto::common::IndexState_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::SegmentState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::SegmentState>() {
  return ::milvus::proto::common::SegmentState_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::PlaceholderType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::PlaceholderType>() {
  return ::milvus::proto::common::PlaceholderType_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::MsgType>() {
  return ::milvus::proto::common::MsgType_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::DslType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::DslType>() {
  return ::milvus::proto::common::DslType_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::CompactionState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::CompactionState>() {
  return ::milvus::proto::common::CompactionState_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::ConsistencyLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::ConsistencyLevel>() {
  return ::milvus::proto::common::ConsistencyLevel_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::ImportState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::ImportState>() {
  return ::milvus::proto::common::ImportState_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::ObjectType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::ObjectType>() {
  return ::milvus::proto::common::ObjectType_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::ObjectPrivilege> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::ObjectPrivilege>() {
  return ::milvus::proto::common::ObjectPrivilege_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::StateCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::StateCode>() {
  return ::milvus::proto::common::StateCode_descriptor();
}
template <>
struct is_proto_enum<::milvus::proto::common::LoadState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::milvus::proto::common::LoadState>() {
  return ::milvus::proto::common::LoadState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2eproto_2epb_2eh
