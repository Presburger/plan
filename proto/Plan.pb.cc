// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Plan.proto

#include "Plan.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace milvus {
namespace proto {
namespace plan {

inline constexpr QueryInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metric_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        search_params_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topk_{::int64_t{0}},
        round_decimal_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QueryInfo::QueryInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QueryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryInfoDefaultTypeInternal() {}
  union {
    QueryInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;

inline constexpr ColumnInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nested_path_{},
        field_id_{::int64_t{0}},
        data_type_{static_cast< ::milvus::proto::schema::DataType >(0)},
        is_primary_key_{false},
        is_autoid_{false},
        is_partition_key_{false},
        element_type_{static_cast< ::milvus::proto::schema::DataType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ColumnInfo::ColumnInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColumnInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnInfoDefaultTypeInternal() {}
  union {
    ColumnInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnInfoDefaultTypeInternal _ColumnInfo_default_instance_;

inline constexpr Array::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : array_{},
        same_type_{false},
        element_type_{static_cast< ::milvus::proto::schema::DataType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Array::Array(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayDefaultTypeInternal() {}
  union {
    Array _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayDefaultTypeInternal _Array_default_instance_;

inline constexpr GenericValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : val_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR GenericValue::GenericValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GenericValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericValueDefaultTypeInternal() {}
  union {
    GenericValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericValueDefaultTypeInternal _GenericValue_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AlwaysTrueExpr::AlwaysTrueExpr(::_pbi::ConstantInitialized) {}
struct AlwaysTrueExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlwaysTrueExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlwaysTrueExprDefaultTypeInternal() {}
  union {
    AlwaysTrueExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlwaysTrueExprDefaultTypeInternal _AlwaysTrueExpr_default_instance_;

inline constexpr ValueExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        value_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ValueExpr::ValueExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ValueExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueExprDefaultTypeInternal() {}
  union {
    ValueExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueExprDefaultTypeInternal _ValueExpr_default_instance_;

inline constexpr UnaryRangeExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_info_{nullptr},
        value_{nullptr},
        op_{static_cast< ::milvus::proto::plan::OpType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR UnaryRangeExpr::UnaryRangeExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UnaryRangeExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnaryRangeExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnaryRangeExprDefaultTypeInternal() {}
  union {
    UnaryRangeExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnaryRangeExprDefaultTypeInternal _UnaryRangeExpr_default_instance_;

inline constexpr TermExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        values_{},
        column_info_{nullptr},
        is_in_field_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TermExpr::TermExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TermExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TermExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TermExprDefaultTypeInternal() {}
  union {
    TermExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TermExprDefaultTypeInternal _TermExpr_default_instance_;

inline constexpr JSONContainsExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        elements_{},
        column_info_{nullptr},
        op_{static_cast< ::milvus::proto::plan::JSONContainsExpr_JSONOp >(0)},
        elements_same_type_{false} {}

template <typename>
PROTOBUF_CONSTEXPR JSONContainsExpr::JSONContainsExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JSONContainsExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONContainsExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONContainsExprDefaultTypeInternal() {}
  union {
    JSONContainsExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONContainsExprDefaultTypeInternal _JSONContainsExpr_default_instance_;

inline constexpr ExistsExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ExistsExpr::ExistsExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExistsExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExistsExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExistsExprDefaultTypeInternal() {}
  union {
    ExistsExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExistsExprDefaultTypeInternal _ExistsExpr_default_instance_;

inline constexpr CompareExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        left_column_info_{nullptr},
        right_column_info_{nullptr},
        op_{static_cast< ::milvus::proto::plan::OpType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CompareExpr::CompareExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CompareExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompareExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompareExprDefaultTypeInternal() {}
  union {
    CompareExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompareExprDefaultTypeInternal _CompareExpr_default_instance_;

inline constexpr ColumnExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ColumnExpr::ColumnExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColumnExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnExprDefaultTypeInternal() {}
  union {
    ColumnExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnExprDefaultTypeInternal _ColumnExpr_default_instance_;

inline constexpr BinaryRangeExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_info_{nullptr},
        lower_value_{nullptr},
        upper_value_{nullptr},
        lower_inclusive_{false},
        upper_inclusive_{false} {}

template <typename>
PROTOBUF_CONSTEXPR BinaryRangeExpr::BinaryRangeExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BinaryRangeExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryRangeExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryRangeExprDefaultTypeInternal() {}
  union {
    BinaryRangeExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryRangeExprDefaultTypeInternal _BinaryRangeExpr_default_instance_;

inline constexpr BinaryArithOpEvalRangeExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_info_{nullptr},
        right_operand_{nullptr},
        value_{nullptr},
        arith_op_{static_cast< ::milvus::proto::plan::ArithOpType >(0)},
        op_{static_cast< ::milvus::proto::plan::OpType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BinaryArithOpEvalRangeExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryArithOpEvalRangeExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryArithOpEvalRangeExprDefaultTypeInternal() {}
  union {
    BinaryArithOpEvalRangeExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryArithOpEvalRangeExprDefaultTypeInternal _BinaryArithOpEvalRangeExpr_default_instance_;

inline constexpr BinaryArithOp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_info_{nullptr},
        right_operand_{nullptr},
        arith_op_{static_cast< ::milvus::proto::plan::ArithOpType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BinaryArithOp::BinaryArithOp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BinaryArithOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryArithOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryArithOpDefaultTypeInternal() {}
  union {
    BinaryArithOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryArithOpDefaultTypeInternal _BinaryArithOp_default_instance_;

inline constexpr BinaryArithExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        left_{nullptr},
        right_{nullptr},
        op_{static_cast< ::milvus::proto::plan::ArithOpType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BinaryArithExpr::BinaryArithExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BinaryArithExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryArithExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryArithExprDefaultTypeInternal() {}
  union {
    BinaryArithExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryArithExprDefaultTypeInternal _BinaryArithExpr_default_instance_;

inline constexpr BinaryExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        left_{nullptr},
        right_{nullptr},
        op_{static_cast< ::milvus::proto::plan::BinaryExpr_BinaryOp >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BinaryExpr::BinaryExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BinaryExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryExprDefaultTypeInternal() {}
  union {
    BinaryExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryExprDefaultTypeInternal _BinaryExpr_default_instance_;

inline constexpr Expr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : expr_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Expr::Expr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExprDefaultTypeInternal() {}
  union {
    Expr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExprDefaultTypeInternal _Expr_default_instance_;

inline constexpr UnaryExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        child_{nullptr},
        op_{static_cast< ::milvus::proto::plan::UnaryExpr_UnaryOp >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR UnaryExpr::UnaryExpr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UnaryExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnaryExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnaryExprDefaultTypeInternal() {}
  union {
    UnaryExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnaryExprDefaultTypeInternal _UnaryExpr_default_instance_;

inline constexpr VectorANNS::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        placeholder_tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        predicates_{nullptr},
        query_info_{nullptr},
        field_id_{::int64_t{0}},
        vector_type_{static_cast< ::milvus::proto::plan::VectorType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR VectorANNS::VectorANNS(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VectorANNSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorANNSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorANNSDefaultTypeInternal() {}
  union {
    VectorANNS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorANNSDefaultTypeInternal _VectorANNS_default_instance_;

inline constexpr QueryPlanNode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        predicates_{nullptr},
        limit_{::int64_t{0}},
        is_count_{false} {}

template <typename>
PROTOBUF_CONSTEXPR QueryPlanNode::QueryPlanNode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QueryPlanNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPlanNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPlanNodeDefaultTypeInternal() {}
  union {
    QueryPlanNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPlanNodeDefaultTypeInternal _QueryPlanNode_default_instance_;

inline constexpr PlanNode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : output_field_ids_{},
        _output_field_ids_cached_byte_size_{0},
        node_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PlanNode::PlanNode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlanNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanNodeDefaultTypeInternal() {}
  union {
    PlanNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanNodeDefaultTypeInternal _PlanNode_default_instance_;
}  // namespace plan
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_Plan_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Plan_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Plan_2eproto = nullptr;
const ::uint32_t TableStruct_Plan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _impl_.val_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Array, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Array, _impl_.array_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Array, _impl_.same_type_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Array, _impl_.element_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _impl_.topk_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _impl_.metric_type_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _impl_.search_params_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _impl_.round_decimal_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.field_id_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.data_type_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.is_primary_key_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.is_autoid_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.nested_path_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.is_partition_key_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _impl_.element_type_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnExpr, _impl_.info_),
    0,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ExistsExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ExistsExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ExistsExpr, _impl_.info_),
    0,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ValueExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ValueExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ValueExpr, _impl_.value_),
    0,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _impl_.value_),
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_.lower_inclusive_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_.upper_inclusive_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_.lower_value_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _impl_.upper_value_),
    0,
    ~0u,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _impl_.left_column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _impl_.right_column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _impl_.op_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _impl_.is_in_field_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _impl_.elements_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::JSONContainsExpr, _impl_.elements_same_type_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, _impl_.child_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _impl_.right_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _impl_.arith_op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _impl_.right_operand_),
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _impl_.right_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _impl_.op_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_.column_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_.arith_op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_.right_operand_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _impl_.value_),
    0,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::AlwaysTrueExpr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _impl_.expr_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_.vector_type_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_.field_id_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_.predicates_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_.query_info_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _impl_.placeholder_tag_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryPlanNode, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryPlanNode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryPlanNode, _impl_.predicates_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryPlanNode, _impl_.is_count_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryPlanNode, _impl_.limit_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _impl_.output_field_ids_),
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _impl_.node_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::milvus::proto::plan::GenericValue)},
        {14, -1, -1, sizeof(::milvus::proto::plan::Array)},
        {25, -1, -1, sizeof(::milvus::proto::plan::QueryInfo)},
        {37, -1, -1, sizeof(::milvus::proto::plan::ColumnInfo)},
        {52, 61, -1, sizeof(::milvus::proto::plan::ColumnExpr)},
        {62, 71, -1, sizeof(::milvus::proto::plan::ExistsExpr)},
        {72, 81, -1, sizeof(::milvus::proto::plan::ValueExpr)},
        {82, 93, -1, sizeof(::milvus::proto::plan::UnaryRangeExpr)},
        {96, 109, -1, sizeof(::milvus::proto::plan::BinaryRangeExpr)},
        {114, 125, -1, sizeof(::milvus::proto::plan::CompareExpr)},
        {128, 139, -1, sizeof(::milvus::proto::plan::TermExpr)},
        {142, 154, -1, sizeof(::milvus::proto::plan::JSONContainsExpr)},
        {158, 168, -1, sizeof(::milvus::proto::plan::UnaryExpr)},
        {170, 181, -1, sizeof(::milvus::proto::plan::BinaryExpr)},
        {184, 195, -1, sizeof(::milvus::proto::plan::BinaryArithOp)},
        {198, 209, -1, sizeof(::milvus::proto::plan::BinaryArithExpr)},
        {212, 225, -1, sizeof(::milvus::proto::plan::BinaryArithOpEvalRangeExpr)},
        {230, -1, -1, sizeof(::milvus::proto::plan::AlwaysTrueExpr)},
        {238, -1, -1, sizeof(::milvus::proto::plan::Expr)},
        {260, 273, -1, sizeof(::milvus::proto::plan::VectorANNS)},
        {278, 289, -1, sizeof(::milvus::proto::plan::QueryPlanNode)},
        {292, -1, -1, sizeof(::milvus::proto::plan::PlanNode)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::milvus::proto::plan::_GenericValue_default_instance_._instance,
    &::milvus::proto::plan::_Array_default_instance_._instance,
    &::milvus::proto::plan::_QueryInfo_default_instance_._instance,
    &::milvus::proto::plan::_ColumnInfo_default_instance_._instance,
    &::milvus::proto::plan::_ColumnExpr_default_instance_._instance,
    &::milvus::proto::plan::_ExistsExpr_default_instance_._instance,
    &::milvus::proto::plan::_ValueExpr_default_instance_._instance,
    &::milvus::proto::plan::_UnaryRangeExpr_default_instance_._instance,
    &::milvus::proto::plan::_BinaryRangeExpr_default_instance_._instance,
    &::milvus::proto::plan::_CompareExpr_default_instance_._instance,
    &::milvus::proto::plan::_TermExpr_default_instance_._instance,
    &::milvus::proto::plan::_JSONContainsExpr_default_instance_._instance,
    &::milvus::proto::plan::_UnaryExpr_default_instance_._instance,
    &::milvus::proto::plan::_BinaryExpr_default_instance_._instance,
    &::milvus::proto::plan::_BinaryArithOp_default_instance_._instance,
    &::milvus::proto::plan::_BinaryArithExpr_default_instance_._instance,
    &::milvus::proto::plan::_BinaryArithOpEvalRangeExpr_default_instance_._instance,
    &::milvus::proto::plan::_AlwaysTrueExpr_default_instance_._instance,
    &::milvus::proto::plan::_Expr_default_instance_._instance,
    &::milvus::proto::plan::_VectorANNS_default_instance_._instance,
    &::milvus::proto::plan::_QueryPlanNode_default_instance_._instance,
    &::milvus::proto::plan::_PlanNode_default_instance_._instance,
};
const char descriptor_table_protodef_Plan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nPlan.proto\022\021milvus.proto.plan\032\014schema."
    "proto\"\230\001\n\014GenericValue\022\022\n\010bool_val\030\001 \001(\010"
    "H\000\022\023\n\tint64_val\030\002 \001(\003H\000\022\023\n\tfloat_val\030\003 \001"
    "(\001H\000\022\024\n\nstring_val\030\004 \001(\tH\000\022-\n\tarray_val\030"
    "\005 \001(\0132\030.milvus.proto.plan.ArrayH\000B\005\n\003val"
    "\"\177\n\005Array\022.\n\005array\030\001 \003(\0132\037.milvus.proto."
    "plan.GenericValue\022\021\n\tsame_type\030\002 \001(\010\0223\n\014"
    "element_type\030\003 \001(\0162\035.milvus.proto.schema"
    ".DataType\"\\\n\tQueryInfo\022\014\n\004topk\030\001 \001(\003\022\023\n\013"
    "metric_type\030\003 \001(\t\022\025\n\rsearch_params\030\004 \001(\t"
    "\022\025\n\rround_decimal\030\005 \001(\003\"\337\001\n\nColumnInfo\022\020"
    "\n\010field_id\030\001 \001(\003\0220\n\tdata_type\030\002 \001(\0162\035.mi"
    "lvus.proto.schema.DataType\022\026\n\016is_primary"
    "_key\030\003 \001(\010\022\021\n\tis_autoID\030\004 \001(\010\022\023\n\013nested_"
    "path\030\005 \003(\t\022\030\n\020is_partition_key\030\006 \001(\010\0223\n\014"
    "element_type\030\007 \001(\0162\035.milvus.proto.schema"
    ".DataType\"9\n\nColumnExpr\022+\n\004info\030\001 \001(\0132\035."
    "milvus.proto.plan.ColumnInfo\"9\n\nExistsEx"
    "pr\022+\n\004info\030\001 \001(\0132\035.milvus.proto.plan.Col"
    "umnInfo\";\n\tValueExpr\022.\n\005value\030\001 \001(\0132\037.mi"
    "lvus.proto.plan.GenericValue\"\233\001\n\016UnaryRa"
    "ngeExpr\0222\n\013column_info\030\001 \001(\0132\035.milvus.pr"
    "oto.plan.ColumnInfo\022%\n\002op\030\002 \001(\0162\031.milvus"
    ".proto.plan.OpType\022.\n\005value\030\003 \001(\0132\037.milv"
    "us.proto.plan.GenericValue\"\343\001\n\017BinaryRan"
    "geExpr\0222\n\013column_info\030\001 \001(\0132\035.milvus.pro"
    "to.plan.ColumnInfo\022\027\n\017lower_inclusive\030\002 "
    "\001(\010\022\027\n\017upper_inclusive\030\003 \001(\010\0224\n\013lower_va"
    "lue\030\004 \001(\0132\037.milvus.proto.plan.GenericVal"
    "ue\0224\n\013upper_value\030\005 \001(\0132\037.milvus.proto.p"
    "lan.GenericValue\"\247\001\n\013CompareExpr\0227\n\020left"
    "_column_info\030\001 \001(\0132\035.milvus.proto.plan.C"
    "olumnInfo\0228\n\021right_column_info\030\002 \001(\0132\035.m"
    "ilvus.proto.plan.ColumnInfo\022%\n\002op\030\003 \001(\0162"
    "\031.milvus.proto.plan.OpType\"\204\001\n\010TermExpr\022"
    "2\n\013column_info\030\001 \001(\0132\035.milvus.proto.plan"
    ".ColumnInfo\022/\n\006values\030\002 \003(\0132\037.milvus.pro"
    "to.plan.GenericValue\022\023\n\013is_in_field\030\003 \001("
    "\010\"\224\002\n\020JSONContainsExpr\0222\n\013column_info\030\001 "
    "\001(\0132\035.milvus.proto.plan.ColumnInfo\0221\n\010el"
    "ements\030\002 \003(\0132\037.milvus.proto.plan.Generic"
    "Value\0226\n\002op\030\003 \001(\0162*.milvus.proto.plan.JS"
    "ONContainsExpr.JSONOp\022\032\n\022elements_same_t"
    "ype\030\004 \001(\010\"E\n\006JSONOp\022\013\n\007Invalid\020\000\022\014\n\010Cont"
    "ains\020\001\022\017\n\013ContainsAll\020\002\022\017\n\013ContainsAny\020\003"
    "\"\206\001\n\tUnaryExpr\0220\n\002op\030\001 \001(\0162$.milvus.prot"
    "o.plan.UnaryExpr.UnaryOp\022&\n\005child\030\002 \001(\0132"
    "\027.milvus.proto.plan.Expr\"\037\n\007UnaryOp\022\013\n\007I"
    "nvalid\020\000\022\007\n\003Not\020\001\"\307\001\n\nBinaryExpr\0222\n\002op\030\001"
    " \001(\0162&.milvus.proto.plan.BinaryExpr.Bina"
    "ryOp\022%\n\004left\030\002 \001(\0132\027.milvus.proto.plan.E"
    "xpr\022&\n\005right\030\003 \001(\0132\027.milvus.proto.plan.E"
    "xpr\"6\n\010BinaryOp\022\013\n\007Invalid\020\000\022\016\n\nLogicalA"
    "nd\020\001\022\r\n\tLogicalOr\020\002\"\255\001\n\rBinaryArithOp\0222\n"
    "\013column_info\030\001 \001(\0132\035.milvus.proto.plan.C"
    "olumnInfo\0220\n\010arith_op\030\002 \001(\0162\036.milvus.pro"
    "to.plan.ArithOpType\0226\n\rright_operand\030\003 \001"
    "(\0132\037.milvus.proto.plan.GenericValue\"\214\001\n\017"
    "BinaryArithExpr\022%\n\004left\030\001 \001(\0132\027.milvus.p"
    "roto.plan.Expr\022&\n\005right\030\002 \001(\0132\027.milvus.p"
    "roto.plan.Expr\022*\n\002op\030\003 \001(\0162\036.milvus.prot"
    "o.plan.ArithOpType\"\221\002\n\032BinaryArithOpEval"
    "RangeExpr\0222\n\013column_info\030\001 \001(\0132\035.milvus."
    "proto.plan.ColumnInfo\0220\n\010arith_op\030\002 \001(\0162"
    "\036.milvus.proto.plan.ArithOpType\0226\n\rright"
    "_operand\030\003 \001(\0132\037.milvus.proto.plan.Gener"
    "icValue\022%\n\002op\030\004 \001(\0162\031.milvus.proto.plan."
    "OpType\022.\n\005value\030\005 \001(\0132\037.milvus.proto.pla"
    "n.GenericValue\"\020\n\016AlwaysTrueExpr\"\237\006\n\004Exp"
    "r\0220\n\tterm_expr\030\001 \001(\0132\033.milvus.proto.plan"
    ".TermExprH\000\0222\n\nunary_expr\030\002 \001(\0132\034.milvus"
    ".proto.plan.UnaryExprH\000\0224\n\013binary_expr\030\003"
    " \001(\0132\035.milvus.proto.plan.BinaryExprH\000\0226\n"
    "\014compare_expr\030\004 \001(\0132\036.milvus.proto.plan."
    "CompareExprH\000\022=\n\020unary_range_expr\030\005 \001(\0132"
    "!.milvus.proto.plan.UnaryRangeExprH\000\022\?\n\021"
    "binary_range_expr\030\006 \001(\0132\".milvus.proto.p"
    "lan.BinaryRangeExprH\000\022X\n\037binary_arith_op"
    "_eval_range_expr\030\007 \001(\0132-.milvus.proto.pl"
    "an.BinaryArithOpEvalRangeExprH\000\022\?\n\021binar"
    "y_arith_expr\030\010 \001(\0132\".milvus.proto.plan.B"
    "inaryArithExprH\000\0222\n\nvalue_expr\030\t \001(\0132\034.m"
    "ilvus.proto.plan.ValueExprH\000\0224\n\013column_e"
    "xpr\030\n \001(\0132\035.milvus.proto.plan.ColumnExpr"
    "H\000\0224\n\013exists_expr\030\013 \001(\0132\035.milvus.proto.p"
    "lan.ExistsExprH\000\022=\n\020always_true_expr\030\014 \001"
    "(\0132!.milvus.proto.plan.AlwaysTrueExprH\000\022"
    "A\n\022json_contains_expr\030\r \001(\0132#.milvus.pro"
    "to.plan.JSONContainsExprH\000B\006\n\004expr\"\312\001\n\nV"
    "ectorANNS\0222\n\013vector_type\030\001 \001(\0162\035.milvus."
    "proto.plan.VectorType\022\020\n\010field_id\030\002 \001(\003\022"
    "+\n\npredicates\030\003 \001(\0132\027.milvus.proto.plan."
    "Expr\0220\n\nquery_info\030\004 \001(\0132\034.milvus.proto."
    "plan.QueryInfo\022\027\n\017placeholder_tag\030\005 \001(\t\""
    "]\n\rQueryPlanNode\022+\n\npredicates\030\001 \001(\0132\027.m"
    "ilvus.proto.plan.Expr\022\020\n\010is_count\030\002 \001(\010\022"
    "\r\n\005limit\030\003 \001(\003\"\304\001\n\010PlanNode\0224\n\013vector_an"
    "ns\030\001 \001(\0132\035.milvus.proto.plan.VectorANNSH"
    "\000\022-\n\npredicates\030\002 \001(\0132\027.milvus.proto.pla"
    "n.ExprH\000\0221\n\005query\030\004 \001(\0132 .milvus.proto.p"
    "lan.QueryPlanNodeH\000\022\030\n\020output_field_ids\030"
    "\003 \003(\003B\006\n\004node*\272\001\n\006OpType\022\013\n\007Invalid\020\000\022\017\n"
    "\013GreaterThan\020\001\022\020\n\014GreaterEqual\020\002\022\014\n\010Less"
    "Than\020\003\022\r\n\tLessEqual\020\004\022\t\n\005Equal\020\005\022\014\n\010NotE"
    "qual\020\006\022\017\n\013PrefixMatch\020\007\022\020\n\014PostfixMatch\020"
    "\010\022\t\n\005Match\020\t\022\t\n\005Range\020\n\022\006\n\002In\020\013\022\t\n\005NotIn"
    "\020\014*X\n\013ArithOpType\022\013\n\007Unknown\020\000\022\007\n\003Add\020\001\022"
    "\007\n\003Sub\020\002\022\007\n\003Mul\020\003\022\007\n\003Div\020\004\022\007\n\003Mod\020\005\022\017\n\013A"
    "rrayLength\020\006*B\n\nVectorType\022\020\n\014BinaryVect"
    "or\020\000\022\017\n\013FloatVector\020\001\022\021\n\rFloat16Vector\020\002"
    "B3Z1github.com/milvus-io/milvus/internal"
    "/proto/planpbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Plan_2eproto_deps[1] =
    {
        &::descriptor_table_schema_2eproto,
};
static ::absl::once_flag descriptor_table_Plan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Plan_2eproto = {
    false,
    false,
    4461,
    descriptor_table_protodef_Plan_2eproto,
    "Plan.proto",
    &descriptor_table_Plan_2eproto_once,
    descriptor_table_Plan_2eproto_deps,
    1,
    22,
    schemas,
    file_default_instances,
    TableStruct_Plan_2eproto::offsets,
    file_level_metadata_Plan_2eproto,
    file_level_enum_descriptors_Plan_2eproto,
    file_level_service_descriptors_Plan_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Plan_2eproto_getter() {
  return &descriptor_table_Plan_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Plan_2eproto(&descriptor_table_Plan_2eproto);
namespace milvus {
namespace proto {
namespace plan {
const ::google::protobuf::EnumDescriptor* JSONContainsExpr_JSONOp_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t JSONContainsExpr_JSONOp_internal_data_[] = {
    262144u, 0u, };
bool JSONContainsExpr_JSONOp_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr JSONContainsExpr_JSONOp JSONContainsExpr::Invalid;
constexpr JSONContainsExpr_JSONOp JSONContainsExpr::Contains;
constexpr JSONContainsExpr_JSONOp JSONContainsExpr::ContainsAll;
constexpr JSONContainsExpr_JSONOp JSONContainsExpr::ContainsAny;
constexpr JSONContainsExpr_JSONOp JSONContainsExpr::JSONOp_MIN;
constexpr JSONContainsExpr_JSONOp JSONContainsExpr::JSONOp_MAX;
constexpr int JSONContainsExpr::JSONOp_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* UnaryExpr_UnaryOp_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t UnaryExpr_UnaryOp_internal_data_[] = {
    131072u, 0u, };
bool UnaryExpr_UnaryOp_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr UnaryExpr_UnaryOp UnaryExpr::Invalid;
constexpr UnaryExpr_UnaryOp UnaryExpr::Not;
constexpr UnaryExpr_UnaryOp UnaryExpr::UnaryOp_MIN;
constexpr UnaryExpr_UnaryOp UnaryExpr::UnaryOp_MAX;
constexpr int UnaryExpr::UnaryOp_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* BinaryExpr_BinaryOp_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t BinaryExpr_BinaryOp_internal_data_[] = {
    196608u, 0u, };
bool BinaryExpr_BinaryOp_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BinaryExpr_BinaryOp BinaryExpr::Invalid;
constexpr BinaryExpr_BinaryOp BinaryExpr::LogicalAnd;
constexpr BinaryExpr_BinaryOp BinaryExpr::LogicalOr;
constexpr BinaryExpr_BinaryOp BinaryExpr::BinaryOp_MIN;
constexpr BinaryExpr_BinaryOp BinaryExpr::BinaryOp_MAX;
constexpr int BinaryExpr::BinaryOp_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* OpType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t OpType_internal_data_[] = {
    851968u, 0u, };
bool OpType_IsValid(int value) {
  return 0 <= value && value <= 12;
}
const ::google::protobuf::EnumDescriptor* ArithOpType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ArithOpType_internal_data_[] = {
    458752u, 0u, };
bool ArithOpType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* VectorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Plan_2eproto);
  return file_level_enum_descriptors_Plan_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t VectorType_internal_data_[] = {
    196608u, 0u, };
bool VectorType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class GenericValue::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _impl_._oneof_case_);
  static const ::milvus::proto::plan::Array& array_val(const GenericValue* msg);
};

const ::milvus::proto::plan::Array& GenericValue::_Internal::array_val(const GenericValue* msg) {
  return *msg->_impl_.val_.array_val_;
}
void GenericValue::set_allocated_array_val(::milvus::proto::plan::Array* array_val) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_val();
  if (array_val) {
    ::google::protobuf::Arena* submessage_arena = array_val->GetArena();
    if (message_arena != submessage_arena) {
      array_val = ::google::protobuf::internal::GetOwnedMessage(message_arena, array_val, submessage_arena);
    }
    set_has_array_val();
    _impl_.val_.array_val_ = array_val;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.GenericValue.array_val)
}
GenericValue::GenericValue(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.GenericValue)
}
inline PROTOBUF_NDEBUG_INLINE GenericValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : val_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

GenericValue::GenericValue(
    ::google::protobuf::Arena* arena,
    const GenericValue& from)
    : ::google::protobuf::Message(arena) {
  GenericValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (val_case()) {
    case VAL_NOT_SET:
      break;
      case kBoolVal:
        _impl_.val_.bool_val_ = from._impl_.val_.bool_val_;
        break;
      case kInt64Val:
        _impl_.val_.int64_val_ = from._impl_.val_.int64_val_;
        break;
      case kFloatVal:
        _impl_.val_.float_val_ = from._impl_.val_.float_val_;
        break;
      case kStringVal:
        new (&_impl_.val_.string_val_) decltype(_impl_.val_.string_val_){arena, from._impl_.val_.string_val_};
        break;
      case kArrayVal:
        _impl_.val_.array_val_ = CreateMaybeMessage<::milvus::proto::plan::Array>(arena, *from._impl_.val_.array_val_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.GenericValue)
}
inline PROTOBUF_NDEBUG_INLINE GenericValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : val_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void GenericValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GenericValue::~GenericValue() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.GenericValue)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GenericValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_val()) {
    clear_val();
  }
  _impl_.~Impl_();
}

void GenericValue::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.GenericValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (val_case()) {
    case kBoolVal: {
      // No need to clear
      break;
    }
    case kInt64Val: {
      // No need to clear
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kStringVal: {
      _impl_.val_.string_val_.Destroy();
      break;
    }
    case kArrayVal: {
      if (GetArena() == nullptr) {
        delete _impl_.val_.array_val_;
      }
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VAL_NOT_SET;
}


PROTOBUF_NOINLINE void GenericValue::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.GenericValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GenericValue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 1, 49, 2> GenericValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GenericValue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool bool_val = 1;
    {PROTOBUF_FIELD_OFFSET(GenericValue, _impl_.val_.bool_val_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // int64 int64_val = 2;
    {PROTOBUF_FIELD_OFFSET(GenericValue, _impl_.val_.int64_val_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double float_val = 3;
    {PROTOBUF_FIELD_OFFSET(GenericValue, _impl_.val_.float_val_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // string string_val = 4;
    {PROTOBUF_FIELD_OFFSET(GenericValue, _impl_.val_.string_val_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .milvus.proto.plan.Array array_val = 5;
    {PROTOBUF_FIELD_OFFSET(GenericValue, _impl_.val_.array_val_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Array>()},
  }}, {{
    "\36\0\0\0\12\0\0\0"
    "milvus.proto.plan.GenericValue"
    "string_val"
  }},
};

::uint8_t* GenericValue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.GenericValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (val_case()) {
    case kBoolVal: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this->_internal_bool_val(), target);
      break;
    }
    case kInt64Val: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<2>(
              stream, this->_internal_int64_val(), target);
      break;
    }
    case kFloatVal: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this->_internal_float_val(), target);
      break;
    }
    case kStringVal: {
      const std::string& _s = this->_internal_string_val();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "milvus.proto.plan.GenericValue.string_val");
      target = stream->WriteStringMaybeAliased(4, _s, target);
      break;
    }
    case kArrayVal: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::array_val(this),
          _Internal::array_val(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.GenericValue)
  return target;
}

::size_t GenericValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.GenericValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (val_case()) {
    // bool bool_val = 1;
    case kBoolVal: {
      total_size += 2;
      break;
    }
    // int64 int64_val = 2;
    case kInt64Val: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int64_val());
      break;
    }
    // double float_val = 3;
    case kFloatVal: {
      total_size += 9;
      break;
    }
    // string string_val = 4;
    case kStringVal: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string_val());
      break;
    }
    // .milvus.proto.plan.Array array_val = 5;
    case kArrayVal: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.val_.array_val_);
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GenericValue::_class_data_ = {
    GenericValue::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GenericValue::GetClassData() const {
  return &_class_data_;
}

void GenericValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GenericValue*>(&to_msg);
  auto& from = static_cast<const GenericValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.GenericValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kInt64Val: {
      _this->_internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kFloatVal: {
      _this->_internal_set_float_val(from._internal_float_val());
      break;
    }
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kArrayVal: {
      _this->_internal_mutable_array_val()->::milvus::proto::plan::Array::MergeFrom(
          from._internal_array_val());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GenericValue::CopyFrom(const GenericValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.GenericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GenericValue::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GenericValue::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GenericValue::InternalSwap(GenericValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.val_, other->_impl_.val_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata GenericValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[0]);
}
// ===================================================================

class Array::_Internal {
 public:
};

Array::Array(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.Array)
}
inline PROTOBUF_NDEBUG_INLINE Array::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : array_{visibility, arena, from.array_},
        _cached_size_{0} {}

Array::Array(
    ::google::protobuf::Arena* arena,
    const Array& from)
    : ::google::protobuf::Message(arena) {
  Array* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, same_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, same_type_),
           offsetof(Impl_, element_type_) -
               offsetof(Impl_, same_type_) +
               sizeof(Impl_::element_type_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.Array)
}
inline PROTOBUF_NDEBUG_INLINE Array::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : array_{visibility, arena},
        _cached_size_{0} {}

inline void Array::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, same_type_),
           0,
           offsetof(Impl_, element_type_) -
               offsetof(Impl_, same_type_) +
               sizeof(Impl_::element_type_));
}
Array::~Array() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.Array)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Array::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.Array)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.array_.Clear();
  ::memset(&_impl_.same_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.element_type_) -
      reinterpret_cast<char*>(&_impl_.same_type_)) + sizeof(_impl_.element_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Array::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Array::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Array_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .milvus.proto.plan.GenericValue array = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Array, _impl_.array_)}},
    // bool same_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Array, _impl_.same_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Array, _impl_.same_type_)}},
    // .milvus.proto.schema.DataType element_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Array, _impl_.element_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Array, _impl_.element_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .milvus.proto.plan.GenericValue array = 1;
    {PROTOBUF_FIELD_OFFSET(Array, _impl_.array_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool same_type = 2;
    {PROTOBUF_FIELD_OFFSET(Array, _impl_.same_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .milvus.proto.schema.DataType element_type = 3;
    {PROTOBUF_FIELD_OFFSET(Array, _impl_.element_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* Array::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.Array)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .milvus.proto.plan.GenericValue array = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_size()); i < n; i++) {
    const auto& repfield = this->_internal_array().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool same_type = 2;
  if (this->_internal_same_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_same_type(), target);
  }

  // .milvus.proto.schema.DataType element_type = 3;
  if (this->_internal_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.Array)
  return target;
}

::size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.Array)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.plan.GenericValue array = 1;
  total_size += 1UL * this->_internal_array_size();
  for (const auto& msg : this->_internal_array()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bool same_type = 2;
  if (this->_internal_same_type() != 0) {
    total_size += 2;
  }

  // .milvus.proto.schema.DataType element_type = 3;
  if (this->_internal_element_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Array::_class_data_ = {
    Array::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Array::GetClassData() const {
  return &_class_data_;
}

void Array::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Array*>(&to_msg);
  auto& from = static_cast<const Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.Array)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_array()->MergeFrom(
      from._internal_array());
  if (from._internal_same_type() != 0) {
    _this->_internal_set_same_type(from._internal_same_type());
  }
  if (from._internal_element_type() != 0) {
    _this->_internal_set_element_type(from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Array::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Array::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Array::InternalSwap(Array* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.array_.InternalSwap(&other->_impl_.array_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Array, _impl_.element_type_)
      + sizeof(Array::_impl_.element_type_)
      - PROTOBUF_FIELD_OFFSET(Array, _impl_.same_type_)>(
          reinterpret_cast<char*>(&_impl_.same_type_),
          reinterpret_cast<char*>(&other->_impl_.same_type_));
}

::google::protobuf::Metadata Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[1]);
}
// ===================================================================

class QueryInfo::_Internal {
 public:
};

QueryInfo::QueryInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.QueryInfo)
}
inline PROTOBUF_NDEBUG_INLINE QueryInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : metric_type_(arena, from.metric_type_),
        search_params_(arena, from.search_params_),
        _cached_size_{0} {}

QueryInfo::QueryInfo(
    ::google::protobuf::Arena* arena,
    const QueryInfo& from)
    : ::google::protobuf::Message(arena) {
  QueryInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, topk_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, topk_),
           offsetof(Impl_, round_decimal_) -
               offsetof(Impl_, topk_) +
               sizeof(Impl_::round_decimal_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.QueryInfo)
}
inline PROTOBUF_NDEBUG_INLINE QueryInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metric_type_(arena),
        search_params_(arena),
        _cached_size_{0} {}

inline void QueryInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, topk_),
           0,
           offsetof(Impl_, round_decimal_) -
               offsetof(Impl_, topk_) +
               sizeof(Impl_::round_decimal_));
}
QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.QueryInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.metric_type_.Destroy();
  _impl_.search_params_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.QueryInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metric_type_.ClearToEmpty();
  _impl_.search_params_.ClearToEmpty();
  ::memset(&_impl_.topk_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.round_decimal_) -
      reinterpret_cast<char*>(&_impl_.topk_)) + sizeof(_impl_.round_decimal_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 60, 2> QueryInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967266,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_QueryInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 topk = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QueryInfo, _impl_.topk_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.topk_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string metric_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.metric_type_)}},
    // string search_params = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.search_params_)}},
    // int64 round_decimal = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QueryInfo, _impl_.round_decimal_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.round_decimal_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 topk = 1;
    {PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.topk_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string metric_type = 3;
    {PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.metric_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string search_params = 4;
    {PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.search_params_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 round_decimal = 5;
    {PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.round_decimal_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\33\0\13\15\0\0\0\0"
    "milvus.proto.plan.QueryInfo"
    "metric_type"
    "search_params"
  }},
};

::uint8_t* QueryInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.QueryInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 topk = 1;
  if (this->_internal_topk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_topk(), target);
  }

  // string metric_type = 3;
  if (!this->_internal_metric_type().empty()) {
    const std::string& _s = this->_internal_metric_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "milvus.proto.plan.QueryInfo.metric_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string search_params = 4;
  if (!this->_internal_search_params().empty()) {
    const std::string& _s = this->_internal_search_params();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "milvus.proto.plan.QueryInfo.search_params");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 round_decimal = 5;
  if (this->_internal_round_decimal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_round_decimal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.QueryInfo)
  return target;
}

::size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.QueryInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_type = 3;
  if (!this->_internal_metric_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_metric_type());
  }

  // string search_params = 4;
  if (!this->_internal_search_params().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_search_params());
  }

  // int64 topk = 1;
  if (this->_internal_topk() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_topk());
  }

  // int64 round_decimal = 5;
  if (this->_internal_round_decimal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_round_decimal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData QueryInfo::_class_data_ = {
    QueryInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* QueryInfo::GetClassData() const {
  return &_class_data_;
}

void QueryInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<QueryInfo*>(&to_msg);
  auto& from = static_cast<const QueryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.QueryInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric_type().empty()) {
    _this->_internal_set_metric_type(from._internal_metric_type());
  }
  if (!from._internal_search_params().empty()) {
    _this->_internal_set_search_params(from._internal_search_params());
  }
  if (from._internal_topk() != 0) {
    _this->_internal_set_topk(from._internal_topk());
  }
  if (from._internal_round_decimal() != 0) {
    _this->_internal_set_round_decimal(from._internal_round_decimal());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* QueryInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void QueryInfo::InternalSwap(QueryInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metric_type_, &other->_impl_.metric_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.search_params_, &other->_impl_.search_params_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.round_decimal_)
      + sizeof(QueryInfo::_impl_.round_decimal_)
      - PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.topk_)>(
          reinterpret_cast<char*>(&_impl_.topk_),
          reinterpret_cast<char*>(&other->_impl_.topk_));
}

::google::protobuf::Metadata QueryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[2]);
}
// ===================================================================

class ColumnInfo::_Internal {
 public:
};

ColumnInfo::ColumnInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ColumnInfo)
}
inline PROTOBUF_NDEBUG_INLINE ColumnInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nested_path_{visibility, arena, from.nested_path_},
        _cached_size_{0} {}

ColumnInfo::ColumnInfo(
    ::google::protobuf::Arena* arena,
    const ColumnInfo& from)
    : ::google::protobuf::Message(arena) {
  ColumnInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, field_id_),
           offsetof(Impl_, element_type_) -
               offsetof(Impl_, field_id_) +
               sizeof(Impl_::element_type_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ColumnInfo)
}
inline PROTOBUF_NDEBUG_INLINE ColumnInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nested_path_{visibility, arena},
        _cached_size_{0} {}

inline void ColumnInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_id_),
           0,
           offsetof(Impl_, element_type_) -
               offsetof(Impl_, field_id_) +
               sizeof(Impl_::element_type_));
}
ColumnInfo::~ColumnInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ColumnInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ColumnInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ColumnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ColumnInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nested_path_.Clear();
  ::memset(&_impl_.field_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.element_type_) -
      reinterpret_cast<char*>(&_impl_.field_id_)) + sizeof(_impl_.element_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ColumnInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 48, 2> ColumnInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ColumnInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 field_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ColumnInfo, _impl_.field_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.field_id_)}},
    // .milvus.proto.schema.DataType data_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColumnInfo, _impl_.data_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.data_type_)}},
    // bool is_primary_key = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ColumnInfo, _impl_.is_primary_key_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_primary_key_)}},
    // bool is_autoID = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ColumnInfo, _impl_.is_autoid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_autoid_)}},
    // repeated string nested_path = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.nested_path_)}},
    // bool is_partition_key = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ColumnInfo, _impl_.is_partition_key_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_partition_key_)}},
    // .milvus.proto.schema.DataType element_type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColumnInfo, _impl_.element_type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.element_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 field_id = 1;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.field_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .milvus.proto.schema.DataType data_type = 2;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.data_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_primary_key = 3;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_primary_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_autoID = 4;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_autoid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string nested_path = 5;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.nested_path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool is_partition_key = 6;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.is_partition_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .milvus.proto.schema.DataType element_type = 7;
    {PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.element_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\34\0\0\0\0\13\0\0"
    "milvus.proto.plan.ColumnInfo"
    "nested_path"
  }},
};

::uint8_t* ColumnInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ColumnInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 field_id = 1;
  if (this->_internal_field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_field_id(), target);
  }

  // .milvus.proto.schema.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_data_type(), target);
  }

  // bool is_primary_key = 3;
  if (this->_internal_is_primary_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_primary_key(), target);
  }

  // bool is_autoID = 4;
  if (this->_internal_is_autoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_autoid(), target);
  }

  // repeated string nested_path = 5;
  for (int i = 0, n = this->_internal_nested_path_size(); i < n; ++i) {
    const auto& s = this->_internal_nested_path().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "milvus.proto.plan.ColumnInfo.nested_path");
    target = stream->WriteString(5, s, target);
  }

  // bool is_partition_key = 6;
  if (this->_internal_is_partition_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_partition_key(), target);
  }

  // .milvus.proto.schema.DataType element_type = 7;
  if (this->_internal_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ColumnInfo)
  return target;
}

::size_t ColumnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ColumnInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nested_path = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_nested_path().size());
  for (int i = 0, n = _internal_nested_path().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_nested_path().Get(i));
  }
  // int64 field_id = 1;
  if (this->_internal_field_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_field_id());
  }

  // .milvus.proto.schema.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // bool is_primary_key = 3;
  if (this->_internal_is_primary_key() != 0) {
    total_size += 2;
  }

  // bool is_autoID = 4;
  if (this->_internal_is_autoid() != 0) {
    total_size += 2;
  }

  // bool is_partition_key = 6;
  if (this->_internal_is_partition_key() != 0) {
    total_size += 2;
  }

  // .milvus.proto.schema.DataType element_type = 7;
  if (this->_internal_element_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ColumnInfo::_class_data_ = {
    ColumnInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ColumnInfo::GetClassData() const {
  return &_class_data_;
}

void ColumnInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ColumnInfo*>(&to_msg);
  auto& from = static_cast<const ColumnInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ColumnInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nested_path()->MergeFrom(from._internal_nested_path());
  if (from._internal_field_id() != 0) {
    _this->_internal_set_field_id(from._internal_field_id());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_is_primary_key() != 0) {
    _this->_internal_set_is_primary_key(from._internal_is_primary_key());
  }
  if (from._internal_is_autoid() != 0) {
    _this->_internal_set_is_autoid(from._internal_is_autoid());
  }
  if (from._internal_is_partition_key() != 0) {
    _this->_internal_set_is_partition_key(from._internal_is_partition_key());
  }
  if (from._internal_element_type() != 0) {
    _this->_internal_set_element_type(from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnInfo::CopyFrom(const ColumnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ColumnInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ColumnInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ColumnInfo::InternalSwap(ColumnInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nested_path_.InternalSwap(&other->_impl_.nested_path_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.element_type_)
      + sizeof(ColumnInfo::_impl_.element_type_)
      - PROTOBUF_FIELD_OFFSET(ColumnInfo, _impl_.field_id_)>(
          reinterpret_cast<char*>(&_impl_.field_id_),
          reinterpret_cast<char*>(&other->_impl_.field_id_));
}

::google::protobuf::Metadata ColumnInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[3]);
}
// ===================================================================

class ColumnExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ColumnExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& info(const ColumnExpr* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::ColumnInfo& ColumnExpr::_Internal::info(const ColumnExpr* msg) {
  return *msg->_impl_.info_;
}
ColumnExpr::ColumnExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ColumnExpr)
}
inline PROTOBUF_NDEBUG_INLINE ColumnExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ColumnExpr::ColumnExpr(
    ::google::protobuf::Arena* arena,
    const ColumnExpr& from)
    : ::google::protobuf::Message(arena) {
  ColumnExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ColumnExpr)
}
inline PROTOBUF_NDEBUG_INLINE ColumnExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ColumnExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.info_ = {};
}
ColumnExpr::~ColumnExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ColumnExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ColumnExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ColumnExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ColumnExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ColumnExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ColumnExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ColumnExpr, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ColumnExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .milvus.proto.plan.ColumnInfo info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ColumnExpr, _impl_.info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo info = 1;
    {PROTOBUF_FIELD_OFFSET(ColumnExpr, _impl_.info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
  }}, {{
  }},
};

::uint8_t* ColumnExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ColumnExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ColumnExpr)
  return target;
}

::size_t ColumnExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ColumnExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ColumnExpr::_class_data_ = {
    ColumnExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ColumnExpr::GetClassData() const {
  return &_class_data_;
}

void ColumnExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ColumnExpr*>(&to_msg);
  auto& from = static_cast<const ColumnExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ColumnExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnExpr::CopyFrom(const ColumnExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ColumnExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ColumnExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ColumnExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ColumnExpr::InternalSwap(ColumnExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::google::protobuf::Metadata ColumnExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[4]);
}
// ===================================================================

class ExistsExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<ExistsExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExistsExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& info(const ExistsExpr* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::ColumnInfo& ExistsExpr::_Internal::info(const ExistsExpr* msg) {
  return *msg->_impl_.info_;
}
ExistsExpr::ExistsExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ExistsExpr)
}
inline PROTOBUF_NDEBUG_INLINE ExistsExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ExistsExpr::ExistsExpr(
    ::google::protobuf::Arena* arena,
    const ExistsExpr& from)
    : ::google::protobuf::Message(arena) {
  ExistsExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ExistsExpr)
}
inline PROTOBUF_NDEBUG_INLINE ExistsExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ExistsExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.info_ = {};
}
ExistsExpr::~ExistsExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ExistsExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExistsExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ExistsExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ExistsExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExistsExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ExistsExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExistsExpr, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExistsExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .milvus.proto.plan.ColumnInfo info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExistsExpr, _impl_.info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo info = 1;
    {PROTOBUF_FIELD_OFFSET(ExistsExpr, _impl_.info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
  }}, {{
  }},
};

::uint8_t* ExistsExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ExistsExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ExistsExpr)
  return target;
}

::size_t ExistsExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ExistsExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExistsExpr::_class_data_ = {
    ExistsExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExistsExpr::GetClassData() const {
  return &_class_data_;
}

void ExistsExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExistsExpr*>(&to_msg);
  auto& from = static_cast<const ExistsExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ExistsExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExistsExpr::CopyFrom(const ExistsExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ExistsExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExistsExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExistsExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExistsExpr::InternalSwap(ExistsExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::google::protobuf::Metadata ExistsExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[5]);
}
// ===================================================================

class ValueExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValueExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::GenericValue& value(const ValueExpr* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::GenericValue& ValueExpr::_Internal::value(const ValueExpr* msg) {
  return *msg->_impl_.value_;
}
ValueExpr::ValueExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ValueExpr)
}
inline PROTOBUF_NDEBUG_INLINE ValueExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ValueExpr::ValueExpr(
    ::google::protobuf::Arena* arena,
    const ValueExpr& from)
    : ::google::protobuf::Message(arena) {
  ValueExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.value_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ValueExpr)
}
inline PROTOBUF_NDEBUG_INLINE ValueExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ValueExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
ValueExpr::~ValueExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ValueExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ValueExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.value_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ValueExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ValueExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ValueExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ValueExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ValueExpr, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ValueExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .milvus.proto.plan.GenericValue value = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ValueExpr, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.GenericValue value = 1;
    {PROTOBUF_FIELD_OFFSET(ValueExpr, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* ValueExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ValueExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.GenericValue value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ValueExpr)
  return target;
}

::size_t ValueExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ValueExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.GenericValue value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ValueExpr::_class_data_ = {
    ValueExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ValueExpr::GetClassData() const {
  return &_class_data_;
}

void ValueExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ValueExpr*>(&to_msg);
  auto& from = static_cast<const ValueExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ValueExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ValueExpr::CopyFrom(const ValueExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ValueExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ValueExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ValueExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ValueExpr::InternalSwap(ValueExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata ValueExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[6]);
}
// ===================================================================

class UnaryRangeExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<UnaryRangeExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const UnaryRangeExpr* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::GenericValue& value(const UnaryRangeExpr* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::ColumnInfo& UnaryRangeExpr::_Internal::column_info(const UnaryRangeExpr* msg) {
  return *msg->_impl_.column_info_;
}
const ::milvus::proto::plan::GenericValue& UnaryRangeExpr::_Internal::value(const UnaryRangeExpr* msg) {
  return *msg->_impl_.value_;
}
UnaryRangeExpr::UnaryRangeExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.UnaryRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE UnaryRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UnaryRangeExpr::UnaryRangeExpr(
    ::google::protobuf::Arena* arena,
    const UnaryRangeExpr& from)
    : ::google::protobuf::Message(arena) {
  UnaryRangeExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.value_)
                : nullptr;
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.UnaryRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE UnaryRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UnaryRangeExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::op_));
}
UnaryRangeExpr::~UnaryRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.UnaryRangeExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UnaryRangeExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  delete _impl_.value_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UnaryRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.UnaryRangeExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.column_info_ != nullptr);
      _impl_.column_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_.op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UnaryRangeExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> UnaryRangeExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_UnaryRangeExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.column_info_)}},
    // .milvus.proto.plan.OpType op = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UnaryRangeExpr, _impl_.op_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.op_)}},
    // .milvus.proto.plan.GenericValue value = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.OpType op = 2;
    {PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.GenericValue value = 3;
    {PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.value_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* UnaryRangeExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.UnaryRangeExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.OpType op = 2;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_op(), target);
  }

  // .milvus.proto.plan.GenericValue value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.UnaryRangeExpr)
  return target;
}

::size_t UnaryRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.UnaryRangeExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
    }

    // .milvus.proto.plan.GenericValue value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
    }

  }
  // .milvus.proto.plan.OpType op = 2;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UnaryRangeExpr::_class_data_ = {
    UnaryRangeExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UnaryRangeExpr::GetClassData() const {
  return &_class_data_;
}

void UnaryRangeExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UnaryRangeExpr*>(&to_msg);
  auto& from = static_cast<const UnaryRangeExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.UnaryRangeExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_column_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_value());
    }
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnaryRangeExpr::CopyFrom(const UnaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.UnaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UnaryRangeExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UnaryRangeExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UnaryRangeExpr::InternalSwap(UnaryRangeExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.op_)
      + sizeof(UnaryRangeExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata UnaryRangeExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[7]);
}
// ===================================================================

class BinaryRangeExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryRangeExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryRangeExpr* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::GenericValue& lower_value(const BinaryRangeExpr* msg);
  static void set_has_lower_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::milvus::proto::plan::GenericValue& upper_value(const BinaryRangeExpr* msg);
  static void set_has_upper_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::milvus::proto::plan::ColumnInfo& BinaryRangeExpr::_Internal::column_info(const BinaryRangeExpr* msg) {
  return *msg->_impl_.column_info_;
}
const ::milvus::proto::plan::GenericValue& BinaryRangeExpr::_Internal::lower_value(const BinaryRangeExpr* msg) {
  return *msg->_impl_.lower_value_;
}
const ::milvus::proto::plan::GenericValue& BinaryRangeExpr::_Internal::upper_value(const BinaryRangeExpr* msg) {
  return *msg->_impl_.upper_value_;
}
BinaryRangeExpr::BinaryRangeExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BinaryRangeExpr::BinaryRangeExpr(
    ::google::protobuf::Arena* arena,
    const BinaryRangeExpr& from)
    : ::google::protobuf::Message(arena) {
  BinaryRangeExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  _impl_.lower_value_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.lower_value_)
                : nullptr;
  _impl_.upper_value_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.upper_value_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_inclusive_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lower_inclusive_),
           offsetof(Impl_, upper_inclusive_) -
               offsetof(Impl_, lower_inclusive_) +
               sizeof(Impl_::upper_inclusive_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinaryRangeExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, upper_inclusive_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::upper_inclusive_));
}
BinaryRangeExpr::~BinaryRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryRangeExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BinaryRangeExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  delete _impl_.lower_value_;
  delete _impl_.upper_value_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BinaryRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryRangeExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.column_info_ != nullptr);
      _impl_.column_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lower_value_ != nullptr);
      _impl_.lower_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.upper_value_ != nullptr);
      _impl_.upper_value_->Clear();
    }
  }
  ::memset(&_impl_.lower_inclusive_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.upper_inclusive_) -
      reinterpret_cast<char*>(&_impl_.lower_inclusive_)) + sizeof(_impl_.upper_inclusive_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BinaryRangeExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> BinaryRangeExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BinaryRangeExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.column_info_)}},
    // bool lower_inclusive = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BinaryRangeExpr, _impl_.lower_inclusive_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.lower_inclusive_)}},
    // bool upper_inclusive = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BinaryRangeExpr, _impl_.upper_inclusive_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.upper_inclusive_)}},
    // .milvus.proto.plan.GenericValue lower_value = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.lower_value_)}},
    // .milvus.proto.plan.GenericValue upper_value = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.upper_value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool lower_inclusive = 2;
    {PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.lower_inclusive_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool upper_inclusive = 3;
    {PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.upper_inclusive_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .milvus.proto.plan.GenericValue lower_value = 4;
    {PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.lower_value_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.GenericValue upper_value = 5;
    {PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.upper_value_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* BinaryRangeExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryRangeExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // bool lower_inclusive = 2;
  if (this->_internal_lower_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_lower_inclusive(), target);
  }

  // bool upper_inclusive = 3;
  if (this->_internal_upper_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_upper_inclusive(), target);
  }

  // .milvus.proto.plan.GenericValue lower_value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::lower_value(this),
        _Internal::lower_value(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.GenericValue upper_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::upper_value(this),
        _Internal::upper_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryRangeExpr)
  return target;
}

::size_t BinaryRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryRangeExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
    }

    // .milvus.proto.plan.GenericValue lower_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lower_value_);
    }

    // .milvus.proto.plan.GenericValue upper_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.upper_value_);
    }

  }
  // bool lower_inclusive = 2;
  if (this->_internal_lower_inclusive() != 0) {
    total_size += 2;
  }

  // bool upper_inclusive = 3;
  if (this->_internal_upper_inclusive() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BinaryRangeExpr::_class_data_ = {
    BinaryRangeExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BinaryRangeExpr::GetClassData() const {
  return &_class_data_;
}

void BinaryRangeExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BinaryRangeExpr*>(&to_msg);
  auto& from = static_cast<const BinaryRangeExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryRangeExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_column_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lower_value()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_lower_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_upper_value()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_upper_value());
    }
  }
  if (from._internal_lower_inclusive() != 0) {
    _this->_internal_set_lower_inclusive(from._internal_lower_inclusive());
  }
  if (from._internal_upper_inclusive() != 0) {
    _this->_internal_set_upper_inclusive(from._internal_upper_inclusive());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryRangeExpr::CopyFrom(const BinaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BinaryRangeExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BinaryRangeExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BinaryRangeExpr::InternalSwap(BinaryRangeExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.upper_inclusive_)
      + sizeof(BinaryRangeExpr::_impl_.upper_inclusive_)
      - PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata BinaryRangeExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[8]);
}
// ===================================================================

class CompareExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<CompareExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& left_column_info(const CompareExpr* msg);
  static void set_has_left_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::ColumnInfo& right_column_info(const CompareExpr* msg);
  static void set_has_right_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::ColumnInfo& CompareExpr::_Internal::left_column_info(const CompareExpr* msg) {
  return *msg->_impl_.left_column_info_;
}
const ::milvus::proto::plan::ColumnInfo& CompareExpr::_Internal::right_column_info(const CompareExpr* msg) {
  return *msg->_impl_.right_column_info_;
}
CompareExpr::CompareExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.CompareExpr)
}
inline PROTOBUF_NDEBUG_INLINE CompareExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CompareExpr::CompareExpr(
    ::google::protobuf::Arena* arena,
    const CompareExpr& from)
    : ::google::protobuf::Message(arena) {
  CompareExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.left_column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.left_column_info_)
                : nullptr;
  _impl_.right_column_info_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.right_column_info_)
                : nullptr;
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.CompareExpr)
}
inline PROTOBUF_NDEBUG_INLINE CompareExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CompareExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, left_column_info_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, left_column_info_) +
               sizeof(Impl_::op_));
}
CompareExpr::~CompareExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.CompareExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompareExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.left_column_info_;
  delete _impl_.right_column_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CompareExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.CompareExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.left_column_info_ != nullptr);
      _impl_.left_column_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.right_column_info_ != nullptr);
      _impl_.right_column_info_->Clear();
    }
  }
  _impl_.op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompareExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> CompareExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CompareExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo left_column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.left_column_info_)}},
    // .milvus.proto.plan.ColumnInfo right_column_info = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.right_column_info_)}},
    // .milvus.proto.plan.OpType op = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompareExpr, _impl_.op_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.op_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo left_column_info = 1;
    {PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.left_column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ColumnInfo right_column_info = 2;
    {PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.right_column_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.OpType op = 3;
    {PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
  }}, {{
  }},
};

::uint8_t* CompareExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.CompareExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo left_column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::left_column_info(this),
        _Internal::left_column_info(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.ColumnInfo right_column_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::right_column_info(this),
        _Internal::right_column_info(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.OpType op = 3;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.CompareExpr)
  return target;
}

::size_t CompareExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.CompareExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.ColumnInfo left_column_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.left_column_info_);
    }

    // .milvus.proto.plan.ColumnInfo right_column_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.right_column_info_);
    }

  }
  // .milvus.proto.plan.OpType op = 3;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompareExpr::_class_data_ = {
    CompareExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CompareExpr::GetClassData() const {
  return &_class_data_;
}

void CompareExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompareExpr*>(&to_msg);
  auto& from = static_cast<const CompareExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.CompareExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_left_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_left_column_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_right_column_info());
    }
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompareExpr::CopyFrom(const CompareExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.CompareExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompareExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CompareExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CompareExpr::InternalSwap(CompareExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.op_)
      + sizeof(CompareExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(CompareExpr, _impl_.left_column_info_)>(
          reinterpret_cast<char*>(&_impl_.left_column_info_),
          reinterpret_cast<char*>(&other->_impl_.left_column_info_));
}

::google::protobuf::Metadata CompareExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[9]);
}
// ===================================================================

class TermExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<TermExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TermExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const TermExpr* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::ColumnInfo& TermExpr::_Internal::column_info(const TermExpr* msg) {
  return *msg->_impl_.column_info_;
}
TermExpr::TermExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.TermExpr)
}
inline PROTOBUF_NDEBUG_INLINE TermExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        values_{visibility, arena, from.values_} {}

TermExpr::TermExpr(
    ::google::protobuf::Arena* arena,
    const TermExpr& from)
    : ::google::protobuf::Message(arena) {
  TermExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  _impl_.is_in_field_ = from._impl_.is_in_field_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.TermExpr)
}
inline PROTOBUF_NDEBUG_INLINE TermExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        values_{visibility, arena} {}

inline void TermExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, is_in_field_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::is_in_field_));
}
TermExpr::~TermExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.TermExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TermExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TermExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.TermExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.column_info_ != nullptr);
    _impl_.column_info_->Clear();
  }
  _impl_.is_in_field_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TermExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> TermExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TermExpr, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TermExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.column_info_)}},
    // repeated .milvus.proto.plan.GenericValue values = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.values_)}},
    // bool is_in_field = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TermExpr, _impl_.is_in_field_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.is_in_field_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .milvus.proto.plan.GenericValue values = 2;
    {PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.values_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_in_field = 3;
    {PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.is_in_field_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* TermExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.TermExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.plan.GenericValue values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_in_field = 3;
  if (this->_internal_is_in_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_in_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.TermExpr)
  return target;
}

::size_t TermExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.TermExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.plan.GenericValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
  }

  // bool is_in_field = 3;
  if (this->_internal_is_in_field() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TermExpr::_class_data_ = {
    TermExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TermExpr::GetClassData() const {
  return &_class_data_;
}

void TermExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TermExpr*>(&to_msg);
  auto& from = static_cast<const TermExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.TermExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
        from._internal_column_info());
  }
  if (from._internal_is_in_field() != 0) {
    _this->_internal_set_is_in_field(from._internal_is_in_field());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TermExpr::CopyFrom(const TermExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.TermExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TermExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TermExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TermExpr::InternalSwap(TermExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.is_in_field_)
      + sizeof(TermExpr::_impl_.is_in_field_)
      - PROTOBUF_FIELD_OFFSET(TermExpr, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata TermExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[10]);
}
// ===================================================================

class JSONContainsExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<JSONContainsExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const JSONContainsExpr* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::ColumnInfo& JSONContainsExpr::_Internal::column_info(const JSONContainsExpr* msg) {
  return *msg->_impl_.column_info_;
}
JSONContainsExpr::JSONContainsExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.JSONContainsExpr)
}
inline PROTOBUF_NDEBUG_INLINE JSONContainsExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        elements_{visibility, arena, from.elements_} {}

JSONContainsExpr::JSONContainsExpr(
    ::google::protobuf::Arena* arena,
    const JSONContainsExpr& from)
    : ::google::protobuf::Message(arena) {
  JSONContainsExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, op_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, op_),
           offsetof(Impl_, elements_same_type_) -
               offsetof(Impl_, op_) +
               sizeof(Impl_::elements_same_type_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.JSONContainsExpr)
}
inline PROTOBUF_NDEBUG_INLINE JSONContainsExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        elements_{visibility, arena} {}

inline void JSONContainsExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, elements_same_type_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::elements_same_type_));
}
JSONContainsExpr::~JSONContainsExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.JSONContainsExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JSONContainsExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JSONContainsExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.JSONContainsExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.column_info_ != nullptr);
    _impl_.column_info_->Clear();
  }
  ::memset(&_impl_.op_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.elements_same_type_) -
      reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.elements_same_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JSONContainsExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> JSONContainsExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_JSONContainsExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool elements_same_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JSONContainsExpr, _impl_.elements_same_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.elements_same_type_)}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.column_info_)}},
    // repeated .milvus.proto.plan.GenericValue elements = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.elements_)}},
    // .milvus.proto.plan.JSONContainsExpr.JSONOp op = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JSONContainsExpr, _impl_.op_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.op_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .milvus.proto.plan.GenericValue elements = 2;
    {PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.elements_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.JSONContainsExpr.JSONOp op = 3;
    {PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool elements_same_type = 4;
    {PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.elements_same_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* JSONContainsExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.JSONContainsExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.plan.GenericValue elements = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.JSONContainsExpr.JSONOp op = 3;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_op(), target);
  }

  // bool elements_same_type = 4;
  if (this->_internal_elements_same_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_elements_same_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.JSONContainsExpr)
  return target;
}

::size_t JSONContainsExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.JSONContainsExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.plan.GenericValue elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_internal_elements()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
  }

  // .milvus.proto.plan.JSONContainsExpr.JSONOp op = 3;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  // bool elements_same_type = 4;
  if (this->_internal_elements_same_type() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JSONContainsExpr::_class_data_ = {
    JSONContainsExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JSONContainsExpr::GetClassData() const {
  return &_class_data_;
}

void JSONContainsExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JSONContainsExpr*>(&to_msg);
  auto& from = static_cast<const JSONContainsExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.JSONContainsExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_elements()->MergeFrom(
      from._internal_elements());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
        from._internal_column_info());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_elements_same_type() != 0) {
    _this->_internal_set_elements_same_type(from._internal_elements_same_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JSONContainsExpr::CopyFrom(const JSONContainsExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.JSONContainsExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JSONContainsExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JSONContainsExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JSONContainsExpr::InternalSwap(JSONContainsExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.elements_same_type_)
      + sizeof(JSONContainsExpr::_impl_.elements_same_type_)
      - PROTOBUF_FIELD_OFFSET(JSONContainsExpr, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata JSONContainsExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[11]);
}
// ===================================================================

class UnaryExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<UnaryExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::Expr& child(const UnaryExpr* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::Expr& UnaryExpr::_Internal::child(const UnaryExpr* msg) {
  return *msg->_impl_.child_;
}
UnaryExpr::UnaryExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.UnaryExpr)
}
inline PROTOBUF_NDEBUG_INLINE UnaryExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UnaryExpr::UnaryExpr(
    ::google::protobuf::Arena* arena,
    const UnaryExpr& from)
    : ::google::protobuf::Message(arena) {
  UnaryExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.child_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.child_)
                : nullptr;
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.UnaryExpr)
}
inline PROTOBUF_NDEBUG_INLINE UnaryExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UnaryExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, child_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, child_) +
               sizeof(Impl_::op_));
}
UnaryExpr::~UnaryExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.UnaryExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UnaryExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.child_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UnaryExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.UnaryExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.child_ != nullptr);
    _impl_.child_->Clear();
  }
  _impl_.op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UnaryExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> UnaryExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_UnaryExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .milvus.proto.plan.Expr child = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.child_)}},
    // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UnaryExpr, _impl_.op_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.op_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
    {PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.Expr child = 2;
    {PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.child_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
  }}, {{
  }},
};

::uint8_t* UnaryExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.UnaryExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_op(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.Expr child = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.UnaryExpr)
  return target;
}

::size_t UnaryExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.UnaryExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr child = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.child_);
  }

  // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UnaryExpr::_class_data_ = {
    UnaryExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UnaryExpr::GetClassData() const {
  return &_class_data_;
}

void UnaryExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UnaryExpr*>(&to_msg);
  auto& from = static_cast<const UnaryExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.UnaryExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_child()->::milvus::proto::plan::Expr::MergeFrom(
        from._internal_child());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnaryExpr::CopyFrom(const UnaryExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.UnaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UnaryExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UnaryExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UnaryExpr::InternalSwap(UnaryExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.op_)
      + sizeof(UnaryExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(UnaryExpr, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

::google::protobuf::Metadata UnaryExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[12]);
}
// ===================================================================

class BinaryExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::Expr& left(const BinaryExpr* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::Expr& right(const BinaryExpr* msg);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::Expr& BinaryExpr::_Internal::left(const BinaryExpr* msg) {
  return *msg->_impl_.left_;
}
const ::milvus::proto::plan::Expr& BinaryExpr::_Internal::right(const BinaryExpr* msg) {
  return *msg->_impl_.right_;
}
BinaryExpr::BinaryExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BinaryExpr::BinaryExpr(
    ::google::protobuf::Arena* arena,
    const BinaryExpr& from)
    : ::google::protobuf::Message(arena) {
  BinaryExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.left_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.left_)
                : nullptr;
  _impl_.right_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.right_)
                : nullptr;
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinaryExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, left_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, left_) +
               sizeof(Impl_::op_));
}
BinaryExpr::~BinaryExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BinaryExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.left_;
  delete _impl_.right_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BinaryExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.left_ != nullptr);
      _impl_.left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.right_ != nullptr);
      _impl_.right_->Clear();
    }
  }
  _impl_.op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BinaryExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> BinaryExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BinaryExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinaryExpr, _impl_.op_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.op_)}},
    // .milvus.proto.plan.Expr left = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.left_)}},
    // .milvus.proto.plan.Expr right = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.right_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
    {PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.Expr left = 2;
    {PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.left_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.Expr right = 3;
    {PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.right_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
  }}, {{
  }},
};

::uint8_t* BinaryExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_op(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.Expr left = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.Expr right = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryExpr)
  return target;
}

::size_t BinaryExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.Expr left = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.left_);
    }

    // .milvus.proto.plan.Expr right = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.right_);
    }

  }
  // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BinaryExpr::_class_data_ = {
    BinaryExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BinaryExpr::GetClassData() const {
  return &_class_data_;
}

void BinaryExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BinaryExpr*>(&to_msg);
  auto& from = static_cast<const BinaryExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_left()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_right());
    }
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryExpr::CopyFrom(const BinaryExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BinaryExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BinaryExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BinaryExpr::InternalSwap(BinaryExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.op_)
      + sizeof(BinaryExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(BinaryExpr, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::google::protobuf::Metadata BinaryExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[13]);
}
// ===================================================================

class BinaryArithOp::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryArithOp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryArithOp* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::GenericValue& right_operand(const BinaryArithOp* msg);
  static void set_has_right_operand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::ColumnInfo& BinaryArithOp::_Internal::column_info(const BinaryArithOp* msg) {
  return *msg->_impl_.column_info_;
}
const ::milvus::proto::plan::GenericValue& BinaryArithOp::_Internal::right_operand(const BinaryArithOp* msg) {
  return *msg->_impl_.right_operand_;
}
BinaryArithOp::BinaryArithOp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithOp)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithOp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BinaryArithOp::BinaryArithOp(
    ::google::protobuf::Arena* arena,
    const BinaryArithOp& from)
    : ::google::protobuf::Message(arena) {
  BinaryArithOp* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  _impl_.right_operand_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.right_operand_)
                : nullptr;
  _impl_.arith_op_ = from._impl_.arith_op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithOp)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithOp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinaryArithOp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, arith_op_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::arith_op_));
}
BinaryArithOp::~BinaryArithOp() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithOp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BinaryArithOp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  delete _impl_.right_operand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BinaryArithOp::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithOp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.column_info_ != nullptr);
      _impl_.column_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.right_operand_ != nullptr);
      _impl_.right_operand_->Clear();
    }
  }
  _impl_.arith_op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BinaryArithOp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> BinaryArithOp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BinaryArithOp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.column_info_)}},
    // .milvus.proto.plan.ArithOpType arith_op = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinaryArithOp, _impl_.arith_op_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.arith_op_)}},
    // .milvus.proto.plan.GenericValue right_operand = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.right_operand_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ArithOpType arith_op = 2;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.arith_op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.GenericValue right_operand = 3;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.right_operand_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* BinaryArithOp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithOp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->_internal_arith_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_arith_op(), target);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::right_operand(this),
        _Internal::right_operand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithOp)
  return target;
}

::size_t BinaryArithOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithOp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
    }

    // .milvus.proto.plan.GenericValue right_operand = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.right_operand_);
    }

  }
  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->_internal_arith_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_arith_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BinaryArithOp::_class_data_ = {
    BinaryArithOp::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BinaryArithOp::GetClassData() const {
  return &_class_data_;
}

void BinaryArithOp::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BinaryArithOp*>(&to_msg);
  auto& from = static_cast<const BinaryArithOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_column_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right_operand()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_right_operand());
    }
  }
  if (from._internal_arith_op() != 0) {
    _this->_internal_set_arith_op(from._internal_arith_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryArithOp::CopyFrom(const BinaryArithOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BinaryArithOp::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BinaryArithOp::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BinaryArithOp::InternalSwap(BinaryArithOp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.arith_op_)
      + sizeof(BinaryArithOp::_impl_.arith_op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithOp, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata BinaryArithOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[14]);
}
// ===================================================================

class BinaryArithExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryArithExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::Expr& left(const BinaryArithExpr* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::Expr& right(const BinaryArithExpr* msg);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::Expr& BinaryArithExpr::_Internal::left(const BinaryArithExpr* msg) {
  return *msg->_impl_.left_;
}
const ::milvus::proto::plan::Expr& BinaryArithExpr::_Internal::right(const BinaryArithExpr* msg) {
  return *msg->_impl_.right_;
}
BinaryArithExpr::BinaryArithExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BinaryArithExpr::BinaryArithExpr(
    ::google::protobuf::Arena* arena,
    const BinaryArithExpr& from)
    : ::google::protobuf::Message(arena) {
  BinaryArithExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.left_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.left_)
                : nullptr;
  _impl_.right_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.right_)
                : nullptr;
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinaryArithExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, left_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, left_) +
               sizeof(Impl_::op_));
}
BinaryArithExpr::~BinaryArithExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BinaryArithExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.left_;
  delete _impl_.right_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BinaryArithExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.left_ != nullptr);
      _impl_.left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.right_ != nullptr);
      _impl_.right_->Clear();
    }
  }
  _impl_.op_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BinaryArithExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> BinaryArithExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BinaryArithExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.Expr left = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.left_)}},
    // .milvus.proto.plan.Expr right = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.right_)}},
    // .milvus.proto.plan.ArithOpType op = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinaryArithExpr, _impl_.op_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.op_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.Expr left = 1;
    {PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.left_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.Expr right = 2;
    {PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.right_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ArithOpType op = 3;
    {PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
  }}, {{
  }},
};

::uint8_t* BinaryArithExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.Expr left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.Expr right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.ArithOpType op = 3;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithExpr)
  return target;
}

::size_t BinaryArithExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.Expr left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.left_);
    }

    // .milvus.proto.plan.Expr right = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.right_);
    }

  }
  // .milvus.proto.plan.ArithOpType op = 3;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BinaryArithExpr::_class_data_ = {
    BinaryArithExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BinaryArithExpr::GetClassData() const {
  return &_class_data_;
}

void BinaryArithExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BinaryArithExpr*>(&to_msg);
  auto& from = static_cast<const BinaryArithExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_left()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_right());
    }
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryArithExpr::CopyFrom(const BinaryArithExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BinaryArithExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BinaryArithExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BinaryArithExpr::InternalSwap(BinaryArithExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.op_)
      + sizeof(BinaryArithExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithExpr, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::google::protobuf::Metadata BinaryArithExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[15]);
}
// ===================================================================

class BinaryArithOpEvalRangeExpr::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryArithOpEvalRangeExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_._has_bits_);
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryArithOpEvalRangeExpr* msg);
  static void set_has_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::GenericValue& right_operand(const BinaryArithOpEvalRangeExpr* msg);
  static void set_has_right_operand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::milvus::proto::plan::GenericValue& value(const BinaryArithOpEvalRangeExpr* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::milvus::proto::plan::ColumnInfo& BinaryArithOpEvalRangeExpr::_Internal::column_info(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->_impl_.column_info_;
}
const ::milvus::proto::plan::GenericValue& BinaryArithOpEvalRangeExpr::_Internal::right_operand(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->_impl_.right_operand_;
}
const ::milvus::proto::plan::GenericValue& BinaryArithOpEvalRangeExpr::_Internal::value(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->_impl_.value_;
}
BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithOpEvalRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(
    ::google::protobuf::Arena* arena,
    const BinaryArithOpEvalRangeExpr& from)
    : ::google::protobuf::Message(arena) {
  BinaryArithOpEvalRangeExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.column_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::ColumnInfo>(arena, *from._impl_.column_info_)
                : nullptr;
  _impl_.right_operand_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.right_operand_)
                : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::milvus::proto::plan::GenericValue>(arena, *from._impl_.value_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, arith_op_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, arith_op_),
           offsetof(Impl_, op_) -
               offsetof(Impl_, arith_op_) +
               sizeof(Impl_::op_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
}
inline PROTOBUF_NDEBUG_INLINE BinaryArithOpEvalRangeExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinaryArithOpEvalRangeExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, column_info_),
           0,
           offsetof(Impl_, op_) -
               offsetof(Impl_, column_info_) +
               sizeof(Impl_::op_));
}
BinaryArithOpEvalRangeExpr::~BinaryArithOpEvalRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BinaryArithOpEvalRangeExpr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.column_info_;
  delete _impl_.right_operand_;
  delete _impl_.value_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BinaryArithOpEvalRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.column_info_ != nullptr);
      _impl_.column_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.right_operand_ != nullptr);
      _impl_.right_operand_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  ::memset(&_impl_.arith_op_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.op_) -
      reinterpret_cast<char*>(&_impl_.arith_op_)) + sizeof(_impl_.op_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BinaryArithOpEvalRangeExpr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> BinaryArithOpEvalRangeExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BinaryArithOpEvalRangeExpr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.column_info_)}},
    // .milvus.proto.plan.ArithOpType arith_op = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinaryArithOpEvalRangeExpr, _impl_.arith_op_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.arith_op_)}},
    // .milvus.proto.plan.GenericValue right_operand = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.right_operand_)}},
    // .milvus.proto.plan.OpType op = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinaryArithOpEvalRangeExpr, _impl_.op_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.op_)}},
    // .milvus.proto.plan.GenericValue value = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.column_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ArithOpType arith_op = 2;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.arith_op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.GenericValue right_operand = 3;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.right_operand_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.OpType op = 4;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.op_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .milvus.proto.plan.GenericValue value = 5;
    {PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.value_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnInfo>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::GenericValue>()},
  }}, {{
  }},
};

::uint8_t* BinaryArithOpEvalRangeExpr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::column_info(this),
        _Internal::column_info(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->_internal_arith_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_arith_op(), target);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::right_operand(this),
        _Internal::right_operand(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.OpType op = 4;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_op(), target);
  }

  // .milvus.proto.plan.GenericValue value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  return target;
}

::size_t BinaryArithOpEvalRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .milvus.proto.plan.ColumnInfo column_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.column_info_);
    }

    // .milvus.proto.plan.GenericValue right_operand = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.right_operand_);
    }

    // .milvus.proto.plan.GenericValue value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
    }

  }
  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->_internal_arith_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_arith_op());
  }

  // .milvus.proto.plan.OpType op = 4;
  if (this->_internal_op() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BinaryArithOpEvalRangeExpr::_class_data_ = {
    BinaryArithOpEvalRangeExpr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BinaryArithOpEvalRangeExpr::GetClassData() const {
  return &_class_data_;
}

void BinaryArithOpEvalRangeExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BinaryArithOpEvalRangeExpr*>(&to_msg);
  auto& from = static_cast<const BinaryArithOpEvalRangeExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(
          from._internal_column_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right_operand()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_right_operand());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(
          from._internal_value());
    }
  }
  if (from._internal_arith_op() != 0) {
    _this->_internal_set_arith_op(from._internal_arith_op());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryArithOpEvalRangeExpr::CopyFrom(const BinaryArithOpEvalRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BinaryArithOpEvalRangeExpr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BinaryArithOpEvalRangeExpr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BinaryArithOpEvalRangeExpr::InternalSwap(BinaryArithOpEvalRangeExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.op_)
      + sizeof(BinaryArithOpEvalRangeExpr::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, _impl_.column_info_)>(
          reinterpret_cast<char*>(&_impl_.column_info_),
          reinterpret_cast<char*>(&other->_impl_.column_info_));
}

::google::protobuf::Metadata BinaryArithOpEvalRangeExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[16]);
}
// ===================================================================

class AlwaysTrueExpr::_Internal {
 public:
};

AlwaysTrueExpr::AlwaysTrueExpr(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.AlwaysTrueExpr)
}
AlwaysTrueExpr::AlwaysTrueExpr(
    ::google::protobuf::Arena* arena,
    const AlwaysTrueExpr& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  AlwaysTrueExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.AlwaysTrueExpr)
}









::google::protobuf::Metadata AlwaysTrueExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[17]);
}
// ===================================================================

class Expr::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _impl_._oneof_case_);
  static const ::milvus::proto::plan::TermExpr& term_expr(const Expr* msg);
  static const ::milvus::proto::plan::UnaryExpr& unary_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryExpr& binary_expr(const Expr* msg);
  static const ::milvus::proto::plan::CompareExpr& compare_expr(const Expr* msg);
  static const ::milvus::proto::plan::UnaryRangeExpr& unary_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryRangeExpr& binary_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryArithOpEvalRangeExpr& binary_arith_op_eval_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryArithExpr& binary_arith_expr(const Expr* msg);
  static const ::milvus::proto::plan::ValueExpr& value_expr(const Expr* msg);
  static const ::milvus::proto::plan::ColumnExpr& column_expr(const Expr* msg);
  static const ::milvus::proto::plan::ExistsExpr& exists_expr(const Expr* msg);
  static const ::milvus::proto::plan::AlwaysTrueExpr& always_true_expr(const Expr* msg);
  static const ::milvus::proto::plan::JSONContainsExpr& json_contains_expr(const Expr* msg);
};

const ::milvus::proto::plan::TermExpr& Expr::_Internal::term_expr(const Expr* msg) {
  return *msg->_impl_.expr_.term_expr_;
}
const ::milvus::proto::plan::UnaryExpr& Expr::_Internal::unary_expr(const Expr* msg) {
  return *msg->_impl_.expr_.unary_expr_;
}
const ::milvus::proto::plan::BinaryExpr& Expr::_Internal::binary_expr(const Expr* msg) {
  return *msg->_impl_.expr_.binary_expr_;
}
const ::milvus::proto::plan::CompareExpr& Expr::_Internal::compare_expr(const Expr* msg) {
  return *msg->_impl_.expr_.compare_expr_;
}
const ::milvus::proto::plan::UnaryRangeExpr& Expr::_Internal::unary_range_expr(const Expr* msg) {
  return *msg->_impl_.expr_.unary_range_expr_;
}
const ::milvus::proto::plan::BinaryRangeExpr& Expr::_Internal::binary_range_expr(const Expr* msg) {
  return *msg->_impl_.expr_.binary_range_expr_;
}
const ::milvus::proto::plan::BinaryArithOpEvalRangeExpr& Expr::_Internal::binary_arith_op_eval_range_expr(const Expr* msg) {
  return *msg->_impl_.expr_.binary_arith_op_eval_range_expr_;
}
const ::milvus::proto::plan::BinaryArithExpr& Expr::_Internal::binary_arith_expr(const Expr* msg) {
  return *msg->_impl_.expr_.binary_arith_expr_;
}
const ::milvus::proto::plan::ValueExpr& Expr::_Internal::value_expr(const Expr* msg) {
  return *msg->_impl_.expr_.value_expr_;
}
const ::milvus::proto::plan::ColumnExpr& Expr::_Internal::column_expr(const Expr* msg) {
  return *msg->_impl_.expr_.column_expr_;
}
const ::milvus::proto::plan::ExistsExpr& Expr::_Internal::exists_expr(const Expr* msg) {
  return *msg->_impl_.expr_.exists_expr_;
}
const ::milvus::proto::plan::AlwaysTrueExpr& Expr::_Internal::always_true_expr(const Expr* msg) {
  return *msg->_impl_.expr_.always_true_expr_;
}
const ::milvus::proto::plan::JSONContainsExpr& Expr::_Internal::json_contains_expr(const Expr* msg) {
  return *msg->_impl_.expr_.json_contains_expr_;
}
void Expr::set_allocated_term_expr(::milvus::proto::plan::TermExpr* term_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (term_expr) {
    ::google::protobuf::Arena* submessage_arena = term_expr->GetArena();
    if (message_arena != submessage_arena) {
      term_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, term_expr, submessage_arena);
    }
    set_has_term_expr();
    _impl_.expr_.term_expr_ = term_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.term_expr)
}
void Expr::set_allocated_unary_expr(::milvus::proto::plan::UnaryExpr* unary_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (unary_expr) {
    ::google::protobuf::Arena* submessage_arena = unary_expr->GetArena();
    if (message_arena != submessage_arena) {
      unary_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, unary_expr, submessage_arena);
    }
    set_has_unary_expr();
    _impl_.expr_.unary_expr_ = unary_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.unary_expr)
}
void Expr::set_allocated_binary_expr(::milvus::proto::plan::BinaryExpr* binary_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (binary_expr) {
    ::google::protobuf::Arena* submessage_arena = binary_expr->GetArena();
    if (message_arena != submessage_arena) {
      binary_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, binary_expr, submessage_arena);
    }
    set_has_binary_expr();
    _impl_.expr_.binary_expr_ = binary_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_expr)
}
void Expr::set_allocated_compare_expr(::milvus::proto::plan::CompareExpr* compare_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (compare_expr) {
    ::google::protobuf::Arena* submessage_arena = compare_expr->GetArena();
    if (message_arena != submessage_arena) {
      compare_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, compare_expr, submessage_arena);
    }
    set_has_compare_expr();
    _impl_.expr_.compare_expr_ = compare_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.compare_expr)
}
void Expr::set_allocated_unary_range_expr(::milvus::proto::plan::UnaryRangeExpr* unary_range_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (unary_range_expr) {
    ::google::protobuf::Arena* submessage_arena = unary_range_expr->GetArena();
    if (message_arena != submessage_arena) {
      unary_range_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, unary_range_expr, submessage_arena);
    }
    set_has_unary_range_expr();
    _impl_.expr_.unary_range_expr_ = unary_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.unary_range_expr)
}
void Expr::set_allocated_binary_range_expr(::milvus::proto::plan::BinaryRangeExpr* binary_range_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (binary_range_expr) {
    ::google::protobuf::Arena* submessage_arena = binary_range_expr->GetArena();
    if (message_arena != submessage_arena) {
      binary_range_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, binary_range_expr, submessage_arena);
    }
    set_has_binary_range_expr();
    _impl_.expr_.binary_range_expr_ = binary_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_range_expr)
}
void Expr::set_allocated_binary_arith_op_eval_range_expr(::milvus::proto::plan::BinaryArithOpEvalRangeExpr* binary_arith_op_eval_range_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (binary_arith_op_eval_range_expr) {
    ::google::protobuf::Arena* submessage_arena = binary_arith_op_eval_range_expr->GetArena();
    if (message_arena != submessage_arena) {
      binary_arith_op_eval_range_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, binary_arith_op_eval_range_expr, submessage_arena);
    }
    set_has_binary_arith_op_eval_range_expr();
    _impl_.expr_.binary_arith_op_eval_range_expr_ = binary_arith_op_eval_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_arith_op_eval_range_expr)
}
void Expr::set_allocated_binary_arith_expr(::milvus::proto::plan::BinaryArithExpr* binary_arith_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (binary_arith_expr) {
    ::google::protobuf::Arena* submessage_arena = binary_arith_expr->GetArena();
    if (message_arena != submessage_arena) {
      binary_arith_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, binary_arith_expr, submessage_arena);
    }
    set_has_binary_arith_expr();
    _impl_.expr_.binary_arith_expr_ = binary_arith_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_arith_expr)
}
void Expr::set_allocated_value_expr(::milvus::proto::plan::ValueExpr* value_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (value_expr) {
    ::google::protobuf::Arena* submessage_arena = value_expr->GetArena();
    if (message_arena != submessage_arena) {
      value_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, value_expr, submessage_arena);
    }
    set_has_value_expr();
    _impl_.expr_.value_expr_ = value_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.value_expr)
}
void Expr::set_allocated_column_expr(::milvus::proto::plan::ColumnExpr* column_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (column_expr) {
    ::google::protobuf::Arena* submessage_arena = column_expr->GetArena();
    if (message_arena != submessage_arena) {
      column_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, column_expr, submessage_arena);
    }
    set_has_column_expr();
    _impl_.expr_.column_expr_ = column_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.column_expr)
}
void Expr::set_allocated_exists_expr(::milvus::proto::plan::ExistsExpr* exists_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (exists_expr) {
    ::google::protobuf::Arena* submessage_arena = exists_expr->GetArena();
    if (message_arena != submessage_arena) {
      exists_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, exists_expr, submessage_arena);
    }
    set_has_exists_expr();
    _impl_.expr_.exists_expr_ = exists_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.exists_expr)
}
void Expr::set_allocated_always_true_expr(::milvus::proto::plan::AlwaysTrueExpr* always_true_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (always_true_expr) {
    ::google::protobuf::Arena* submessage_arena = always_true_expr->GetArena();
    if (message_arena != submessage_arena) {
      always_true_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, always_true_expr, submessage_arena);
    }
    set_has_always_true_expr();
    _impl_.expr_.always_true_expr_ = always_true_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.always_true_expr)
}
void Expr::set_allocated_json_contains_expr(::milvus::proto::plan::JSONContainsExpr* json_contains_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr();
  if (json_contains_expr) {
    ::google::protobuf::Arena* submessage_arena = json_contains_expr->GetArena();
    if (message_arena != submessage_arena) {
      json_contains_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, json_contains_expr, submessage_arena);
    }
    set_has_json_contains_expr();
    _impl_.expr_.json_contains_expr_ = json_contains_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.json_contains_expr)
}
Expr::Expr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.Expr)
}
inline PROTOBUF_NDEBUG_INLINE Expr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : expr_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Expr::Expr(
    ::google::protobuf::Arena* arena,
    const Expr& from)
    : ::google::protobuf::Message(arena) {
  Expr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (expr_case()) {
    case EXPR_NOT_SET:
      break;
      case kTermExpr:
        _impl_.expr_.term_expr_ = CreateMaybeMessage<::milvus::proto::plan::TermExpr>(arena, *from._impl_.expr_.term_expr_);
        break;
      case kUnaryExpr:
        _impl_.expr_.unary_expr_ = CreateMaybeMessage<::milvus::proto::plan::UnaryExpr>(arena, *from._impl_.expr_.unary_expr_);
        break;
      case kBinaryExpr:
        _impl_.expr_.binary_expr_ = CreateMaybeMessage<::milvus::proto::plan::BinaryExpr>(arena, *from._impl_.expr_.binary_expr_);
        break;
      case kCompareExpr:
        _impl_.expr_.compare_expr_ = CreateMaybeMessage<::milvus::proto::plan::CompareExpr>(arena, *from._impl_.expr_.compare_expr_);
        break;
      case kUnaryRangeExpr:
        _impl_.expr_.unary_range_expr_ = CreateMaybeMessage<::milvus::proto::plan::UnaryRangeExpr>(arena, *from._impl_.expr_.unary_range_expr_);
        break;
      case kBinaryRangeExpr:
        _impl_.expr_.binary_range_expr_ = CreateMaybeMessage<::milvus::proto::plan::BinaryRangeExpr>(arena, *from._impl_.expr_.binary_range_expr_);
        break;
      case kBinaryArithOpEvalRangeExpr:
        _impl_.expr_.binary_arith_op_eval_range_expr_ = CreateMaybeMessage<::milvus::proto::plan::BinaryArithOpEvalRangeExpr>(arena, *from._impl_.expr_.binary_arith_op_eval_range_expr_);
        break;
      case kBinaryArithExpr:
        _impl_.expr_.binary_arith_expr_ = CreateMaybeMessage<::milvus::proto::plan::BinaryArithExpr>(arena, *from._impl_.expr_.binary_arith_expr_);
        break;
      case kValueExpr:
        _impl_.expr_.value_expr_ = CreateMaybeMessage<::milvus::proto::plan::ValueExpr>(arena, *from._impl_.expr_.value_expr_);
        break;
      case kColumnExpr:
        _impl_.expr_.column_expr_ = CreateMaybeMessage<::milvus::proto::plan::ColumnExpr>(arena, *from._impl_.expr_.column_expr_);
        break;
      case kExistsExpr:
        _impl_.expr_.exists_expr_ = CreateMaybeMessage<::milvus::proto::plan::ExistsExpr>(arena, *from._impl_.expr_.exists_expr_);
        break;
      case kAlwaysTrueExpr:
        _impl_.expr_.always_true_expr_ = CreateMaybeMessage<::milvus::proto::plan::AlwaysTrueExpr>(arena, *from._impl_.expr_.always_true_expr_);
        break;
      case kJsonContainsExpr:
        _impl_.expr_.json_contains_expr_ = CreateMaybeMessage<::milvus::proto::plan::JSONContainsExpr>(arena, *from._impl_.expr_.json_contains_expr_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.Expr)
}
inline PROTOBUF_NDEBUG_INLINE Expr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : expr_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Expr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Expr::~Expr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.Expr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Expr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_expr()) {
    clear_expr();
  }
  _impl_.~Impl_();
}

void Expr::clear_expr() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.Expr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (expr_case()) {
    case kTermExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.term_expr_;
      }
      break;
    }
    case kUnaryExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.unary_expr_;
      }
      break;
    }
    case kBinaryExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.binary_expr_;
      }
      break;
    }
    case kCompareExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.compare_expr_;
      }
      break;
    }
    case kUnaryRangeExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.unary_range_expr_;
      }
      break;
    }
    case kBinaryRangeExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.binary_range_expr_;
      }
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.binary_arith_op_eval_range_expr_;
      }
      break;
    }
    case kBinaryArithExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.binary_arith_expr_;
      }
      break;
    }
    case kValueExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.value_expr_;
      }
      break;
    }
    case kColumnExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.column_expr_;
      }
      break;
    }
    case kExistsExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.exists_expr_;
      }
      break;
    }
    case kAlwaysTrueExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.always_true_expr_;
      }
      break;
    }
    case kJsonContainsExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_.json_contains_expr_;
      }
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXPR_NOT_SET;
}


PROTOBUF_NOINLINE void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.Expr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Expr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 13, 13, 0, 2> Expr::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Expr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.TermExpr term_expr = 1;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.term_expr_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.UnaryExpr unary_expr = 2;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.unary_expr_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.BinaryExpr binary_expr = 3;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.binary_expr_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.CompareExpr compare_expr = 4;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.compare_expr_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.unary_range_expr_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.binary_range_expr_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.binary_arith_op_eval_range_expr_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.binary_arith_expr_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ValueExpr value_expr = 9;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.value_expr_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ColumnExpr column_expr = 10;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.column_expr_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.ExistsExpr exists_expr = 11;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.exists_expr_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.AlwaysTrueExpr always_true_expr = 12;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.always_true_expr_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .milvus.proto.plan.JSONContainsExpr json_contains_expr = 13;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_.json_contains_expr_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::TermExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::UnaryExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::BinaryExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::CompareExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::UnaryRangeExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::BinaryRangeExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::BinaryArithOpEvalRangeExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::BinaryArithExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ValueExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ColumnExpr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::ExistsExpr>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::milvus::proto::plan::_AlwaysTrueExpr_default_instance_},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::JSONContainsExpr>()},
  }}, {{
  }},
};

::uint8_t* Expr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.Expr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (expr_case()) {
    case kTermExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::term_expr(this),
          _Internal::term_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnaryExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::unary_expr(this),
          _Internal::unary_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinaryExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::binary_expr(this),
          _Internal::binary_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kCompareExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::compare_expr(this),
          _Internal::compare_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnaryRangeExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::unary_range_expr(this),
          _Internal::unary_range_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinaryRangeExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::binary_range_expr(this),
          _Internal::binary_range_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::binary_arith_op_eval_range_expr(this),
          _Internal::binary_arith_op_eval_range_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinaryArithExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::binary_arith_expr(this),
          _Internal::binary_arith_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kValueExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::value_expr(this),
          _Internal::value_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kColumnExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::column_expr(this),
          _Internal::column_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kExistsExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::exists_expr(this),
          _Internal::exists_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kAlwaysTrueExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, _Internal::always_true_expr(this),
          _Internal::always_true_expr(this).GetCachedSize(), target, stream);
      break;
    }
    case kJsonContainsExpr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, _Internal::json_contains_expr(this),
          _Internal::json_contains_expr(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.Expr)
  return target;
}

::size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.Expr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (expr_case()) {
    // .milvus.proto.plan.TermExpr term_expr = 1;
    case kTermExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.term_expr_);
      break;
    }
    // .milvus.proto.plan.UnaryExpr unary_expr = 2;
    case kUnaryExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.unary_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryExpr binary_expr = 3;
    case kBinaryExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.binary_expr_);
      break;
    }
    // .milvus.proto.plan.CompareExpr compare_expr = 4;
    case kCompareExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.compare_expr_);
      break;
    }
    // .milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;
    case kUnaryRangeExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.unary_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;
    case kBinaryRangeExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.binary_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
    case kBinaryArithOpEvalRangeExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.binary_arith_op_eval_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;
    case kBinaryArithExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.binary_arith_expr_);
      break;
    }
    // .milvus.proto.plan.ValueExpr value_expr = 9;
    case kValueExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.value_expr_);
      break;
    }
    // .milvus.proto.plan.ColumnExpr column_expr = 10;
    case kColumnExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.column_expr_);
      break;
    }
    // .milvus.proto.plan.ExistsExpr exists_expr = 11;
    case kExistsExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.exists_expr_);
      break;
    }
    // .milvus.proto.plan.AlwaysTrueExpr always_true_expr = 12;
    case kAlwaysTrueExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.always_true_expr_);
      break;
    }
    // .milvus.proto.plan.JSONContainsExpr json_contains_expr = 13;
    case kJsonContainsExpr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expr_.json_contains_expr_);
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Expr::_class_data_ = {
    Expr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Expr::GetClassData() const {
  return &_class_data_;
}

void Expr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Expr*>(&to_msg);
  auto& from = static_cast<const Expr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.Expr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expr_case()) {
    case kTermExpr: {
      _this->_internal_mutable_term_expr()->::milvus::proto::plan::TermExpr::MergeFrom(
          from._internal_term_expr());
      break;
    }
    case kUnaryExpr: {
      _this->_internal_mutable_unary_expr()->::milvus::proto::plan::UnaryExpr::MergeFrom(
          from._internal_unary_expr());
      break;
    }
    case kBinaryExpr: {
      _this->_internal_mutable_binary_expr()->::milvus::proto::plan::BinaryExpr::MergeFrom(
          from._internal_binary_expr());
      break;
    }
    case kCompareExpr: {
      _this->_internal_mutable_compare_expr()->::milvus::proto::plan::CompareExpr::MergeFrom(
          from._internal_compare_expr());
      break;
    }
    case kUnaryRangeExpr: {
      _this->_internal_mutable_unary_range_expr()->::milvus::proto::plan::UnaryRangeExpr::MergeFrom(
          from._internal_unary_range_expr());
      break;
    }
    case kBinaryRangeExpr: {
      _this->_internal_mutable_binary_range_expr()->::milvus::proto::plan::BinaryRangeExpr::MergeFrom(
          from._internal_binary_range_expr());
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      _this->_internal_mutable_binary_arith_op_eval_range_expr()->::milvus::proto::plan::BinaryArithOpEvalRangeExpr::MergeFrom(
          from._internal_binary_arith_op_eval_range_expr());
      break;
    }
    case kBinaryArithExpr: {
      _this->_internal_mutable_binary_arith_expr()->::milvus::proto::plan::BinaryArithExpr::MergeFrom(
          from._internal_binary_arith_expr());
      break;
    }
    case kValueExpr: {
      _this->_internal_mutable_value_expr()->::milvus::proto::plan::ValueExpr::MergeFrom(
          from._internal_value_expr());
      break;
    }
    case kColumnExpr: {
      _this->_internal_mutable_column_expr()->::milvus::proto::plan::ColumnExpr::MergeFrom(
          from._internal_column_expr());
      break;
    }
    case kExistsExpr: {
      _this->_internal_mutable_exists_expr()->::milvus::proto::plan::ExistsExpr::MergeFrom(
          from._internal_exists_expr());
      break;
    }
    case kAlwaysTrueExpr: {
      _this->_internal_mutable_always_true_expr()->::milvus::proto::plan::AlwaysTrueExpr::MergeFrom(
          from._internal_always_true_expr());
      break;
    }
    case kJsonContainsExpr: {
      _this->_internal_mutable_json_contains_expr()->::milvus::proto::plan::JSONContainsExpr::MergeFrom(
          from._internal_json_contains_expr());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Expr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Expr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Expr::InternalSwap(Expr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.expr_, other->_impl_.expr_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[18]);
}
// ===================================================================

class VectorANNS::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorANNS>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_._has_bits_);
  static const ::milvus::proto::plan::Expr& predicates(const VectorANNS* msg);
  static void set_has_predicates(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::milvus::proto::plan::QueryInfo& query_info(const VectorANNS* msg);
  static void set_has_query_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::milvus::proto::plan::Expr& VectorANNS::_Internal::predicates(const VectorANNS* msg) {
  return *msg->_impl_.predicates_;
}
const ::milvus::proto::plan::QueryInfo& VectorANNS::_Internal::query_info(const VectorANNS* msg) {
  return *msg->_impl_.query_info_;
}
VectorANNS::VectorANNS(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.VectorANNS)
}
inline PROTOBUF_NDEBUG_INLINE VectorANNS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        placeholder_tag_(arena, from.placeholder_tag_) {}

VectorANNS::VectorANNS(
    ::google::protobuf::Arena* arena,
    const VectorANNS& from)
    : ::google::protobuf::Message(arena) {
  VectorANNS* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.predicates_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.predicates_)
                : nullptr;
  _impl_.query_info_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::milvus::proto::plan::QueryInfo>(arena, *from._impl_.query_info_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, field_id_),
           offsetof(Impl_, vector_type_) -
               offsetof(Impl_, field_id_) +
               sizeof(Impl_::vector_type_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.VectorANNS)
}
inline PROTOBUF_NDEBUG_INLINE VectorANNS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        placeholder_tag_(arena) {}

inline void VectorANNS::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, predicates_),
           0,
           offsetof(Impl_, vector_type_) -
               offsetof(Impl_, predicates_) +
               sizeof(Impl_::vector_type_));
}
VectorANNS::~VectorANNS() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.VectorANNS)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VectorANNS::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.placeholder_tag_.Destroy();
  delete _impl_.predicates_;
  delete _impl_.query_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VectorANNS::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.VectorANNS)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.placeholder_tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.predicates_ != nullptr);
      _impl_.predicates_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.query_info_ != nullptr);
      _impl_.query_info_->Clear();
    }
  }
  ::memset(&_impl_.field_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.vector_type_) -
      reinterpret_cast<char*>(&_impl_.field_id_)) + sizeof(_impl_.vector_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VectorANNS::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 52, 2> VectorANNS::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VectorANNS_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.VectorType vector_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorANNS, _impl_.vector_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.vector_type_)}},
    // int64 field_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VectorANNS, _impl_.field_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.field_id_)}},
    // .milvus.proto.plan.Expr predicates = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.predicates_)}},
    // .milvus.proto.plan.QueryInfo query_info = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.query_info_)}},
    // string placeholder_tag = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.placeholder_tag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.VectorType vector_type = 1;
    {PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.vector_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 field_id = 2;
    {PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.field_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .milvus.proto.plan.Expr predicates = 3;
    {PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.predicates_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.QueryInfo query_info = 4;
    {PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.query_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string placeholder_tag = 5;
    {PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.placeholder_tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::QueryInfo>()},
  }}, {{
    "\34\0\0\0\0\17\0\0"
    "milvus.proto.plan.VectorANNS"
    "placeholder_tag"
  }},
};

::uint8_t* VectorANNS::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.VectorANNS)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .milvus.proto.plan.VectorType vector_type = 1;
  if (this->_internal_vector_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_vector_type(), target);
  }

  // int64 field_id = 2;
  if (this->_internal_field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_field_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.Expr predicates = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::predicates(this),
        _Internal::predicates(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.plan.QueryInfo query_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::query_info(this),
        _Internal::query_info(this).GetCachedSize(), target, stream);
  }

  // string placeholder_tag = 5;
  if (!this->_internal_placeholder_tag().empty()) {
    const std::string& _s = this->_internal_placeholder_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "milvus.proto.plan.VectorANNS.placeholder_tag");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.VectorANNS)
  return target;
}

::size_t VectorANNS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.VectorANNS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string placeholder_tag = 5;
  if (!this->_internal_placeholder_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_placeholder_tag());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .milvus.proto.plan.Expr predicates = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.predicates_);
    }

    // .milvus.proto.plan.QueryInfo query_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.query_info_);
    }

  }
  // int64 field_id = 2;
  if (this->_internal_field_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_field_id());
  }

  // .milvus.proto.plan.VectorType vector_type = 1;
  if (this->_internal_vector_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vector_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VectorANNS::_class_data_ = {
    VectorANNS::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VectorANNS::GetClassData() const {
  return &_class_data_;
}

void VectorANNS::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VectorANNS*>(&to_msg);
  auto& from = static_cast<const VectorANNS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.VectorANNS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_placeholder_tag().empty()) {
    _this->_internal_set_placeholder_tag(from._internal_placeholder_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_predicates());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_query_info()->::milvus::proto::plan::QueryInfo::MergeFrom(
          from._internal_query_info());
    }
  }
  if (from._internal_field_id() != 0) {
    _this->_internal_set_field_id(from._internal_field_id());
  }
  if (from._internal_vector_type() != 0) {
    _this->_internal_set_vector_type(from._internal_vector_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorANNS::CopyFrom(const VectorANNS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.VectorANNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VectorANNS::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VectorANNS::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VectorANNS::InternalSwap(VectorANNS* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.placeholder_tag_, &other->_impl_.placeholder_tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.vector_type_)
      + sizeof(VectorANNS::_impl_.vector_type_)
      - PROTOBUF_FIELD_OFFSET(VectorANNS, _impl_.predicates_)>(
          reinterpret_cast<char*>(&_impl_.predicates_),
          reinterpret_cast<char*>(&other->_impl_.predicates_));
}

::google::protobuf::Metadata VectorANNS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[19]);
}
// ===================================================================

class QueryPlanNode::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPlanNode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_._has_bits_);
  static const ::milvus::proto::plan::Expr& predicates(const QueryPlanNode* msg);
  static void set_has_predicates(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::milvus::proto::plan::Expr& QueryPlanNode::_Internal::predicates(const QueryPlanNode* msg) {
  return *msg->_impl_.predicates_;
}
QueryPlanNode::QueryPlanNode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.QueryPlanNode)
}
inline PROTOBUF_NDEBUG_INLINE QueryPlanNode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

QueryPlanNode::QueryPlanNode(
    ::google::protobuf::Arena* arena,
    const QueryPlanNode& from)
    : ::google::protobuf::Message(arena) {
  QueryPlanNode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.predicates_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.predicates_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, limit_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, limit_),
           offsetof(Impl_, is_count_) -
               offsetof(Impl_, limit_) +
               sizeof(Impl_::is_count_));

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.QueryPlanNode)
}
inline PROTOBUF_NDEBUG_INLINE QueryPlanNode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QueryPlanNode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, predicates_),
           0,
           offsetof(Impl_, is_count_) -
               offsetof(Impl_, predicates_) +
               sizeof(Impl_::is_count_));
}
QueryPlanNode::~QueryPlanNode() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.QueryPlanNode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryPlanNode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.predicates_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void QueryPlanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.QueryPlanNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.predicates_ != nullptr);
    _impl_.predicates_->Clear();
  }
  ::memset(&_impl_.limit_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_count_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.is_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryPlanNode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> QueryPlanNode::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_QueryPlanNode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .milvus.proto.plan.Expr predicates = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.predicates_)}},
    // bool is_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(QueryPlanNode, _impl_.is_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.is_count_)}},
    // int64 limit = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QueryPlanNode, _impl_.limit_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.limit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.Expr predicates = 1;
    {PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.predicates_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_count = 2;
    {PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.is_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 limit = 3;
    {PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.limit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
  }}, {{
  }},
};

::uint8_t* QueryPlanNode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.QueryPlanNode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .milvus.proto.plan.Expr predicates = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::predicates(this),
        _Internal::predicates(this).GetCachedSize(), target, stream);
  }

  // bool is_count = 2;
  if (this->_internal_is_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_count(), target);
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.QueryPlanNode)
  return target;
}

::size_t QueryPlanNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.QueryPlanNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr predicates = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.predicates_);
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_limit());
  }

  // bool is_count = 2;
  if (this->_internal_is_count() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData QueryPlanNode::_class_data_ = {
    QueryPlanNode::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* QueryPlanNode::GetClassData() const {
  return &_class_data_;
}

void QueryPlanNode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<QueryPlanNode*>(&to_msg);
  auto& from = static_cast<const QueryPlanNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.QueryPlanNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(
        from._internal_predicates());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_is_count() != 0) {
    _this->_internal_set_is_count(from._internal_is_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPlanNode::CopyFrom(const QueryPlanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.QueryPlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryPlanNode::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* QueryPlanNode::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void QueryPlanNode::InternalSwap(QueryPlanNode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.is_count_)
      + sizeof(QueryPlanNode::_impl_.is_count_)
      - PROTOBUF_FIELD_OFFSET(QueryPlanNode, _impl_.predicates_)>(
          reinterpret_cast<char*>(&_impl_.predicates_),
          reinterpret_cast<char*>(&other->_impl_.predicates_));
}

::google::protobuf::Metadata QueryPlanNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[20]);
}
// ===================================================================

class PlanNode::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _impl_._oneof_case_);
  static const ::milvus::proto::plan::VectorANNS& vector_anns(const PlanNode* msg);
  static const ::milvus::proto::plan::Expr& predicates(const PlanNode* msg);
  static const ::milvus::proto::plan::QueryPlanNode& query(const PlanNode* msg);
};

const ::milvus::proto::plan::VectorANNS& PlanNode::_Internal::vector_anns(const PlanNode* msg) {
  return *msg->_impl_.node_.vector_anns_;
}
const ::milvus::proto::plan::Expr& PlanNode::_Internal::predicates(const PlanNode* msg) {
  return *msg->_impl_.node_.predicates_;
}
const ::milvus::proto::plan::QueryPlanNode& PlanNode::_Internal::query(const PlanNode* msg) {
  return *msg->_impl_.node_.query_;
}
void PlanNode::set_allocated_vector_anns(::milvus::proto::plan::VectorANNS* vector_anns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_node();
  if (vector_anns) {
    ::google::protobuf::Arena* submessage_arena = vector_anns->GetArena();
    if (message_arena != submessage_arena) {
      vector_anns = ::google::protobuf::internal::GetOwnedMessage(message_arena, vector_anns, submessage_arena);
    }
    set_has_vector_anns();
    _impl_.node_.vector_anns_ = vector_anns;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.PlanNode.vector_anns)
}
void PlanNode::set_allocated_predicates(::milvus::proto::plan::Expr* predicates) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_node();
  if (predicates) {
    ::google::protobuf::Arena* submessage_arena = predicates->GetArena();
    if (message_arena != submessage_arena) {
      predicates = ::google::protobuf::internal::GetOwnedMessage(message_arena, predicates, submessage_arena);
    }
    set_has_predicates();
    _impl_.node_.predicates_ = predicates;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.PlanNode.predicates)
}
void PlanNode::set_allocated_query(::milvus::proto::plan::QueryPlanNode* query) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_node();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = query->GetArena();
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.node_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.PlanNode.query)
}
PlanNode::PlanNode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.PlanNode)
}
inline PROTOBUF_NDEBUG_INLINE PlanNode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : output_field_ids_{visibility, arena, from.output_field_ids_},
        _output_field_ids_cached_byte_size_{0},
        node_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PlanNode::PlanNode(
    ::google::protobuf::Arena* arena,
    const PlanNode& from)
    : ::google::protobuf::Message(arena) {
  PlanNode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (node_case()) {
    case NODE_NOT_SET:
      break;
      case kVectorAnns:
        _impl_.node_.vector_anns_ = CreateMaybeMessage<::milvus::proto::plan::VectorANNS>(arena, *from._impl_.node_.vector_anns_);
        break;
      case kPredicates:
        _impl_.node_.predicates_ = CreateMaybeMessage<::milvus::proto::plan::Expr>(arena, *from._impl_.node_.predicates_);
        break;
      case kQuery:
        _impl_.node_.query_ = CreateMaybeMessage<::milvus::proto::plan::QueryPlanNode>(arena, *from._impl_.node_.query_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.PlanNode)
}
inline PROTOBUF_NDEBUG_INLINE PlanNode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : output_field_ids_{visibility, arena},
        _output_field_ids_cached_byte_size_{0},
        node_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PlanNode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PlanNode::~PlanNode() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.PlanNode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlanNode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_node()) {
    clear_node();
  }
  _impl_.~Impl_();
}

void PlanNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.PlanNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (node_case()) {
    case kVectorAnns: {
      if (GetArena() == nullptr) {
        delete _impl_.node_.vector_anns_;
      }
      break;
    }
    case kPredicates: {
      if (GetArena() == nullptr) {
        delete _impl_.node_.predicates_;
      }
      break;
    }
    case kQuery: {
      if (GetArena() == nullptr) {
        delete _impl_.node_.query_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


PROTOBUF_NOINLINE void PlanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.PlanNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_field_ids_.Clear();
  clear_node();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlanNode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 3, 0, 2> PlanNode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlanNode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int64 output_field_ids = 3;
    {::_pbi::TcParser::FastV64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PlanNode, _impl_.output_field_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .milvus.proto.plan.VectorANNS vector_anns = 1;
    {PROTOBUF_FIELD_OFFSET(PlanNode, _impl_.node_.vector_anns_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .milvus.proto.plan.Expr predicates = 2;
    {PROTOBUF_FIELD_OFFSET(PlanNode, _impl_.node_.predicates_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int64 output_field_ids = 3;
    {PROTOBUF_FIELD_OFFSET(PlanNode, _impl_.output_field_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // .milvus.proto.plan.QueryPlanNode query = 4;
    {PROTOBUF_FIELD_OFFSET(PlanNode, _impl_.node_.query_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::VectorANNS>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::Expr>()},
    {::_pbi::TcParser::GetTable<::milvus::proto::plan::QueryPlanNode>()},
  }}, {{
  }},
};

::uint8_t* PlanNode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.PlanNode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (node_case()) {
    case kVectorAnns: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::vector_anns(this),
          _Internal::vector_anns(this).GetCachedSize(), target, stream);
      break;
    }
    case kPredicates: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::predicates(this),
          _Internal::predicates(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // repeated int64 output_field_ids = 3;
  {
    int byte_size = _impl_._output_field_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_output_field_ids(), byte_size, target);
    }
  }

  // .milvus.proto.plan.QueryPlanNode query = 4;
  if (node_case() == kQuery) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.PlanNode)
  return target;
}

::size_t PlanNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.PlanNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 output_field_ids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_output_field_ids())
    ;
    _impl_._output_field_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  switch (node_case()) {
    // .milvus.proto.plan.VectorANNS vector_anns = 1;
    case kVectorAnns: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.node_.vector_anns_);
      break;
    }
    // .milvus.proto.plan.Expr predicates = 2;
    case kPredicates: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.node_.predicates_);
      break;
    }
    // .milvus.proto.plan.QueryPlanNode query = 4;
    case kQuery: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.node_.query_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlanNode::_class_data_ = {
    PlanNode::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlanNode::GetClassData() const {
  return &_class_data_;
}

void PlanNode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlanNode*>(&to_msg);
  auto& from = static_cast<const PlanNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.PlanNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_output_field_ids()->MergeFrom(from._internal_output_field_ids());
  switch (from.node_case()) {
    case kVectorAnns: {
      _this->_internal_mutable_vector_anns()->::milvus::proto::plan::VectorANNS::MergeFrom(
          from._internal_vector_anns());
      break;
    }
    case kPredicates: {
      _this->_internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(
          from._internal_predicates());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::milvus::proto::plan::QueryPlanNode::MergeFrom(
          from._internal_query());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlanNode::CopyFrom(const PlanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.PlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlanNode::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlanNode::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlanNode::InternalSwap(PlanNode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_field_ids_.InternalSwap(&other->_impl_.output_field_ids_);
  swap(_impl_.node_, other->_impl_.node_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PlanNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Plan_2eproto_getter, &descriptor_table_Plan_2eproto_once,
      file_level_metadata_Plan_2eproto[21]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace plan
}  // namespace proto
}  // namespace milvus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
